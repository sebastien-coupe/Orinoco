(()=>{var t={506:t=>{t.exports=function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}},926:t=>{function e(t,e,n,r,o,i,a){try{var c=t[i](a),u=c.value}catch(t){return void n(t)}c.done?e(u):Promise.resolve(u).then(r,o)}t.exports=function(t){return function(){var n=this,r=arguments;return new Promise((function(o,i){var a=t.apply(n,r);function c(t){e(a,o,i,c,u,"next",t)}function u(t){e(a,o,i,c,u,"throw",t)}c(void 0)}))}}},575:t=>{t.exports=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}},913:t=>{function e(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}t.exports=function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}},754:t=>{function e(n){return t.exports=e=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},e(n)}t.exports=e},205:(t,e,n)=>{var r=n(489);t.exports=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&r(t,e)}},585:(t,e,n)=>{var r=n(8),o=n(506);t.exports=function(t,e){return!e||"object"!==r(e)&&"function"!=typeof e?o(t):e}},489:t=>{function e(n,r){return t.exports=e=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},e(n,r)}t.exports=e},8:t=>{function e(n){return"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?t.exports=e=function(t){return typeof t}:t.exports=e=function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},e(n)}t.exports=e},757:(t,e,n)=>{t.exports=n(666)},666:t=>{var e=function(t){"use strict";var e,n=Object.prototype,r=n.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function u(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{u({},"")}catch(t){u=function(t,e,n){return t[e]=n}}function s(t,e,n,r){var o=e&&e.prototype instanceof v?e:v,i=Object.create(o.prototype),a=new _(r||[]);return i._invoke=function(t,e,n){var r=f;return function(o,i){if(r===p)throw new Error("Generator is already running");if(r===d){if("throw"===o)throw i;return P()}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var c=O(a,n);if(c){if(c===y)continue;return c}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===f)throw r=d,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=p;var u=l(t,e,n);if("normal"===u.type){if(r=n.done?d:h,u.arg===y)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r=d,n.method="throw",n.arg=u.arg)}}}(t,n,a),i}function l(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}t.wrap=s;var f="suspendedStart",h="suspendedYield",p="executing",d="completed",y={};function v(){}function m(){}function g(){}var b={};b[i]=function(){return this};var x=Object.getPrototypeOf,w=x&&x(x(q([])));w&&w!==n&&r.call(w,i)&&(b=w);var L=g.prototype=v.prototype=Object.create(b);function k(t){["next","throw","return"].forEach((function(e){u(t,e,(function(t){return this._invoke(e,t)}))}))}function j(t,e){function n(o,i,a,c){var u=l(t[o],t,i);if("throw"!==u.type){var s=u.arg,f=s.value;return f&&"object"==typeof f&&r.call(f,"__await")?e.resolve(f.__await).then((function(t){n("next",t,a,c)}),(function(t){n("throw",t,a,c)})):e.resolve(f).then((function(t){s.value=t,a(s)}),(function(t){return n("throw",t,a,c)}))}c(u.arg)}var o;this._invoke=function(t,r){function i(){return new e((function(e,o){n(t,r,e,o)}))}return o=o?o.then(i,i):i()}}function O(t,n){var r=t.iterator[n.method];if(r===e){if(n.delegate=null,"throw"===n.method){if(t.iterator.return&&(n.method="return",n.arg=e,O(t,n),"throw"===n.method))return y;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return y}var o=l(r,t.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,y;var i=o.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function E(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function S(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function _(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(E,this),this.reset(!0)}function q(t){if(t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}return{next:P}}function P(){return{value:e,done:!0}}return m.prototype=L.constructor=g,g.constructor=m,m.displayName=u(g,c,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===m||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,g):(t.__proto__=g,u(t,c,"GeneratorFunction")),t.prototype=Object.create(L),t},t.awrap=function(t){return{__await:t}},k(j.prototype),j.prototype[a]=function(){return this},t.AsyncIterator=j,t.async=function(e,n,r,o,i){void 0===i&&(i=Promise);var a=new j(s(e,n,r,o),i);return t.isGeneratorFunction(n)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},k(L),u(L,c,"Generator"),L[i]=function(){return this},L.toString=function(){return"[object Generator]"},t.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},t.values=q,_.prototype={constructor:_,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(S),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return c.type="throw",c.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],c=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var u=r.call(a,"catchLoc"),s=r.call(a,"finallyLoc");if(u&&s){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(u){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,y):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),S(n),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;S(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:q(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}(t.exports);try{regeneratorRuntime=e}catch(t){Function("r","regeneratorRuntime = r")(e)}}},e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={exports:{}};return t[r](o,o.exports,n),o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";var t=n(757),e=n.n(t),r=n(926),o=n.n(r),i=n(575),a=n.n(i),c=n(913),u=n.n(c),s=function(){function t(e){a()(this,t),this.api=e}var n,r,i,c;return u()(t,[{key:"fetchData",value:(c=o()(e().mark((function t(){var n,r,o,i=arguments;return e().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(n=i.length>0&&void 0!==i[0]?i[0]:null,t.prev=1,!n){t.next=8;break}return t.next=5,fetch(this.api+n);case 5:r=t.sent,t.next=11;break;case 8:return t.next=10,fetch(this.api);case 10:r=t.sent;case 11:return t.next=13,r.json();case 13:return o=t.sent,t.abrupt("return",o);case 17:t.prev=17,t.t0=t.catch(1),console.error("La connection avec le serveur n'a pu être établie.\n"+t.t0);case 20:case"end":return t.stop()}}),t,this,[[1,17]])}))),function(){return c.apply(this,arguments)})},{key:"fetch",value:(i=o()(e().mark((function t(n){return e().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.fetchData(n);case 2:return t.abrupt("return",t.sent);case 3:case"end":return t.stop()}}),t,this)}))),function(t){return i.apply(this,arguments)})},{key:"fetchAll",value:(r=o()(e().mark((function t(){return e().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.fetchData();case 2:return t.abrupt("return",t.sent);case 3:case"end":return t.stop()}}),t,this)}))),function(){return r.apply(this,arguments)})},{key:"send",value:(n=o()(e().mark((function t(n){var r,o;return e().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,fetch(this.api,{method:"POST",body:JSON.stringify(n),headers:{"Content-type":"application/json; charset=UTF-8"}});case 2:return r=t.sent,o=r.json(),t.abrupt("return",o);case 5:case"end":return t.stop()}}),t,this)}))),function(t){return n.apply(this,arguments)})}]),t}(),l=function(){function t(){a()(this,t),this.items=[],this.total=0,this.init()}return u()(t,[{key:"init",value:function(){if(localStorage.getItem("cart")){var t=JSON.parse(localStorage.getItem("cart"));this.items=t.items,this.total=t.total}}},{key:"addItem",value:function(t){var e=!1;this.items.map((function(n){n.id===t.id&&(n.quantity+=t.quantity,e=!0)})),e||this.items.push(t),this.save()}},{key:"removeItem",value:function(t){this.items=this.items.filter((function(e){return e.id!==t})),this.save()}},{key:"updateItem",value:function(t,e){this.items.map((function(n){n.id===t&&(n.quantity=e)})),this.save()}},{key:"setTotal",value:function(){this.total=this.items.reduce((function(t,e){return t+e.quantity*e.price}),0)}},{key:"save",value:function(){this.setTotal();var t={items:this.items,total:this.total};localStorage.setItem("cart",JSON.stringify(t))}},{key:"clear",value:function(){this.items=[],this.total=0,localStorage.clear()}},{key:"getCount",value:function(){return this.items.length}},{key:"getData",value:function(){return{items:this.items,total:this.total}}},{key:"getItems",value:function(){return this.items.map((function(t){return t.id}))}}]),t}(),f=n(205),h=n.n(f),p=n(585),d=n.n(p),y=n(754),v=n.n(y);var m=function(t){h()(o,t);var e,n,r=(e=o,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,r=v()(e);if(n){var o=v()(this).constructor;t=Reflect.construct(r,arguments,o)}else t=r.apply(this,arguments);return d()(this,t)});function o(t){return a()(this,o),r.call(this,t)}return u()(o,[{key:"toHTML",value:function(){var t;this.template=document.createElement("div"),this.template.classList.add("md:flex","md:gap-12"),this.template.innerHTML='\n      <div class="relative rounded-xl overflow-hidden md:w-2/4">\n        <img class="w-full h-full object-cover"\n          src="'.concat(this.content.imageUrl,'"\n          alt="').concat(this.content.name,'"\n        />\n      </div>\n      <div class="flex flex-col md:w-2/4">\n        <div>\n          <p class="mt-4 md:mt-0">\n            <strong>Description:</strong> ').concat(this.content.description,'\n          </p>\n        </div>\n        <div class="mt-8 flex justify-between items-center">\n          <label class="text-sm font-semibold" for="color">Couleur:</label>\n          <div id="selector" class="relative w-1/2">\n            <select\n              id="selector"\n              class="block w-full p-2 appearance-none bg-transparent border-b"\n              name="color"\n            >\n              ').concat(this.content.colors.map((function(t){return'<option name="'.concat(t,'">').concat(t,"</option>")})),'\n            </select>\n          </div>\n        </div>\n        <div class="flex justify-between items-center mt-6">\n          <label for="quantity" class="text-sm font-semibold">Quantité:</label>\n          <input type="number" min="1" value="1" id="quantity" class="js-quantity inline-block w-1/4 p-2 bg-transparent border-b text-center"/>\n        </div>\n        <div class="flex gap-4 justify-between mt-16 lg:mt-auto">\n          <span class="inline-flex flex-1 items-center justify-center bg-white rounded-md text-xl text-2xl font-semibold">\n            ').concat((t=this.content.price,(t/=100).toFixed(2)+" €"),'\n          </span>\n          <button \n            class="js-buy inline-block bg-blue-200 text-blue-900 px-4 py-2 rounded-md hover:bg-blue-300"\n            data-id="').concat(this.content._id,'"\n            data-name="').concat(this.content.name,'"\n            data-price="').concat(this.content.price,'"\n            data-quantity="1"\n          >\n            Ajouter\n          </button>\n        </div>\n      </div>\n    ')}}]),o}(function(){function t(e){a()(this,t),this.template=null,this.content=e}return u()(t,[{key:"injectTo",value:function(t){this.toHTML(),t.appendChild(this.template)}},{key:"onAdd",value:function(t){var e=this.template.querySelector(".js-buy"),n=this.template.querySelector(".js-quantity");e.addEventListener("click",t),this instanceof m&&n.addEventListener("change",(function(t){t.target.value<1&&(t.target.value=1),e.dataset.quantity=t.target.value}))}}]),t}());var g=new s("http://localhost:3000/api/teddies/"),b=new l,x=window.location.search.split("=")[1]||null,w=document.querySelector("#item");g.fetch(x).then((function(t){w.innerHTML="";var e='Peluche "'.concat(t.name,'"');document.title="".concat(e," | Orinoco"),document.querySelector("h1").textContent=e;var n=new m(t);n.injectTo(w),n.onAdd((function(t){var e,n={id:t.target.dataset.id,name:t.target.dataset.name,quantity:parseInt(t.target.dataset.quantity),price:parseInt(t.target.dataset.price)};b.addItem(n),(e=document.querySelector("#cart-btn")).classList.add("animate"),e.addEventListener("animationend",(function(t){t.target.classList.remove("animate")}))}))})).catch((function(t){document.querySelector("h1").textContent="Article introuvable",w.innerHTML='\n    <div class="text-center">\n      <h2 class="text-xl">L\'article demandé n\'existe pas.</h2>\n      <p class="mt-6">\n        <a class="underline text-blue-600 hover:text-blue-800" href="index.html">Retourner à la page d\'accueil.</a>\n      </p>\n    </div>\n  '}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,