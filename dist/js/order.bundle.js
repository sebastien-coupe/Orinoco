(()=>{var t={926:t=>{function e(t,e,n,r,a,i,o){try{var l=t[i](o),s=l.value}catch(t){return void n(t)}l.done?e(s):Promise.resolve(s).then(r,a)}t.exports=function(t){return function(){var n=this,r=arguments;return new Promise((function(a,i){var o=t.apply(n,r);function l(t){e(o,a,i,l,s,"next",t)}function s(t){e(o,a,i,l,s,"throw",t)}l(void 0)}))}}},575:t=>{t.exports=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}},913:t=>{function e(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}t.exports=function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}},757:(t,e,n)=>{t.exports=n(666)},666:t=>{var e=function(t){"use strict";var e,n=Object.prototype,r=n.hasOwnProperty,a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",o=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function s(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{s({},"")}catch(t){s=function(t,e,n){return t[e]=n}}function c(t,e,n,r){var a=e&&e.prototype instanceof v?e:v,i=Object.create(a.prototype),o=new q(r||[]);return i._invoke=function(t,e,n){var r=d;return function(a,i){if(r===m)throw new Error("Generator is already running");if(r===p){if("throw"===a)throw i;return j()}for(n.method=a,n.arg=i;;){var o=n.delegate;if(o){var l=S(o,n);if(l){if(l===h)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===d)throw r=p,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=m;var s=u(t,e,n);if("normal"===s.type){if(r=n.done?p:f,s.arg===h)continue;return{value:s.arg,done:n.done}}"throw"===s.type&&(r=p,n.method="throw",n.arg=s.arg)}}}(t,n,o),i}function u(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}t.wrap=c;var d="suspendedStart",f="suspendedYield",m="executing",p="completed",h={};function v(){}function y(){}function b(){}var x={};x[i]=function(){return this};var g=Object.getPrototypeOf,w=g&&g(g(I([])));w&&w!==n&&r.call(w,i)&&(x=w);var k=b.prototype=v.prototype=Object.create(x);function L(t){["next","throw","return"].forEach((function(e){s(t,e,(function(t){return this._invoke(e,t)}))}))}function E(t,e){function n(a,i,o,l){var s=u(t[a],t,i);if("throw"!==s.type){var c=s.arg,d=c.value;return d&&"object"==typeof d&&r.call(d,"__await")?e.resolve(d.__await).then((function(t){n("next",t,o,l)}),(function(t){n("throw",t,o,l)})):e.resolve(d).then((function(t){c.value=t,o(c)}),(function(t){return n("throw",t,o,l)}))}l(s.arg)}var a;this._invoke=function(t,r){function i(){return new e((function(e,a){n(t,r,e,a)}))}return a=a?a.then(i,i):i()}}function S(t,n){var r=t.iterator[n.method];if(r===e){if(n.delegate=null,"throw"===n.method){if(t.iterator.return&&(n.method="return",n.arg=e,S(t,n),"throw"===n.method))return h;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return h}var a=u(r,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,h;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,h):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,h)}function C(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function q(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(C,this),this.reset(!0)}function I(t){if(t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var a=-1,o=function n(){for(;++a<t.length;)if(r.call(t,a))return n.value=t[a],n.done=!1,n;return n.value=e,n.done=!0,n};return o.next=o}}return{next:j}}function j(){return{value:e,done:!0}}return y.prototype=k.constructor=b,b.constructor=y,y.displayName=s(b,l,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===y||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,s(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},t.awrap=function(t){return{__await:t}},L(E.prototype),E.prototype[o]=function(){return this},t.AsyncIterator=E,t.async=function(e,n,r,a,i){void 0===i&&(i=Promise);var o=new E(c(e,n,r,a),i);return t.isGeneratorFunction(n)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},L(k),s(k,l,"Generator"),k[i]=function(){return this},k.toString=function(){return"[object Generator]"},t.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},t.values=I,q.prototype={constructor:q,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(T),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function a(r,a){return l.type="throw",l.arg=t,n.next=r,a&&(n.method="next",n.arg=e),!!a}for(var i=this.tryEntries.length-1;i>=0;--i){var o=this.tryEntries[i],l=o.completion;if("root"===o.tryLoc)return a("end");if(o.tryLoc<=this.prev){var s=r.call(o,"catchLoc"),c=r.call(o,"finallyLoc");if(s&&c){if(this.prev<o.catchLoc)return a(o.catchLoc,!0);if(this.prev<o.finallyLoc)return a(o.finallyLoc)}else if(s){if(this.prev<o.catchLoc)return a(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return a(o.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var a=this.tryEntries[n];if(a.tryLoc<=this.prev&&r.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var i=a;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var o=i?i.completion:{};return o.type=t,o.arg=e,i?(this.method="next",this.next=i.finallyLoc,h):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),h},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),T(n),h}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var a=r.arg;T(n)}return a}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:I(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),h}},t}(t.exports);try{regeneratorRuntime=e}catch(t){Function("r","regeneratorRuntime = r")(e)}}},e={};function n(r){if(e[r])return e[r].exports;var a=e[r]={exports:{}};return t[r](a,a.exports,n),a.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";var t=n(757),e=n.n(t),r=n(926),a=n.n(r),i=n(575),o=n.n(i),l=n(913),s=n.n(l),c=function(){function t(e){o()(this,t),this.api=e}var n,r,i,l;return s()(t,[{key:"fetchData",value:(l=a()(e().mark((function t(){var n,r,a,i=arguments;return e().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(n=i.length>0&&void 0!==i[0]?i[0]:null,t.prev=1,!n){t.next=8;break}return t.next=5,fetch(this.api+n);case 5:r=t.sent,t.next=11;break;case 8:return t.next=10,fetch(this.api);case 10:r=t.sent;case 11:return t.next=13,r.json();case 13:return a=t.sent,t.abrupt("return",a);case 17:t.prev=17,t.t0=t.catch(1),console.error("La connection avec le serveur n'a pu être établie.\n"+t.t0);case 20:case"end":return t.stop()}}),t,this,[[1,17]])}))),function(){return l.apply(this,arguments)})},{key:"fetch",value:(i=a()(e().mark((function t(n){return e().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.fetchData(n);case 2:return t.abrupt("return",t.sent);case 3:case"end":return t.stop()}}),t,this)}))),function(t){return i.apply(this,arguments)})},{key:"fetchAll",value:(r=a()(e().mark((function t(){return e().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.fetchData();case 2:return t.abrupt("return",t.sent);case 3:case"end":return t.stop()}}),t,this)}))),function(){return r.apply(this,arguments)})},{key:"send",value:(n=a()(e().mark((function t(n){var r,a;return e().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,fetch(this.api,{method:"POST",body:JSON.stringify(n),headers:{"Content-type":"application/json; charset=UTF-8"}});case 2:return r=t.sent,a=r.json(),t.abrupt("return",a);case 5:case"end":return t.stop()}}),t,this)}))),function(t){return n.apply(this,arguments)})}]),t}(),u=function(){function t(){o()(this,t),this.items=[],this.total=0,this.init()}return s()(t,[{key:"init",value:function(){if(localStorage.getItem("cart")){var t=JSON.parse(localStorage.getItem("cart"));this.items=t.items,this.total=t.total}}},{key:"addItem",value:function(t){var e=!1;this.items.map((function(n){n.id===t.id&&(n.quantity+=t.quantity,e=!0)})),e||this.items.push(t),this.save()}},{key:"removeItem",value:function(t){this.items=this.items.filter((function(e){return e.id!==t})),this.save()}},{key:"updateItem",value:function(t,e){this.items.map((function(n){n.id===t&&(n.quantity=e)})),this.save()}},{key:"setTotal",value:function(){this.total=this.items.reduce((function(t,e){return t+e.quantity*e.price}),0)}},{key:"save",value:function(){this.setTotal();var t={items:this.items,total:this.total};localStorage.setItem("cart",JSON.stringify(t))}},{key:"clear",value:function(){this.items=[],this.total=0,localStorage.clear()}},{key:"getCount",value:function(){return this.items.length}},{key:"getData",value:function(){return{items:this.items,total:this.total}}},{key:"getItems",value:function(){return this.items.map((function(t){return t.id}))}}]),t}();function d(t){return(t/=100).toFixed(2)+" €"}function f(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return m(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?m(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,a=function(){};return{s:a,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,o=!0,l=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return o=t.done,t},e:function(t){l=!0,i=t},f:function(){try{o||null==n.return||n.return()}finally{if(l)throw i}}}}function m(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}var p=function(){function t(e){o()(this,t),this.template=null,this.data=e}return s()(t,[{key:"onCartClear",value:function(t){this.template.querySelector("#clear-cart").addEventListener("click",t)}},{key:"onCartConfirmation",value:function(t){this.template.querySelector("#confirm-cart").addEventListener("click",t)}},{key:"injectTo",value:function(t){this.toHTML(),t.appendChild(this.template)}},{key:"updatePrice",value:function(){var t,e=this,n=f(this.template.getElementsByClassName("quantity"));try{for(n.s();!(t=n.n()).done;)t.value.addEventListener("change",(function(t){var n=t.target.dataset.id,r=parseInt(document.getElementById("price-".concat(n)).dataset.price),a=document.getElementById("total-".concat(n)),i=new u;a.textContent=d(r*t.target.value),a.dataset.total=parseInt(r*t.target.value),e.setTotal(),i.updateItem(n,parseInt(t.target.value))}))}catch(t){n.e(t)}finally{n.f()}}},{key:"remove",value:function(){var t,e=f(this.template.getElementsByClassName("remove"));try{var n=function(){var e=t.value;e.addEventListener("click",(function(t){(new u).removeItem(e.dataset.id),window.location.reload()}))};for(e.s();!(t=e.n()).done;)n()}catch(t){e.e(t)}finally{e.f()}}},{key:"setTotal",value:function(){var t,e=document.getElementsByClassName("total-per-item"),n=document.getElementById("cart-total"),r=0,a=f(e);try{for(a.s();!(t=a.n()).done;){var i=t.value;r+=parseInt(i.dataset.total)}}catch(t){a.e(t)}finally{a.f()}n.textContent=d(r)}},{key:"toHTML",value:function(){var t=document.createElement("div"),e=document.createElement("table");e.classList.add("w-full"),e.innerHTML='\n      <thead>\n        <tr class="border-b text-lg">\n          <th class="text-left pb-2">Désignation</th>\n          <th>Prix</th>\n          <th>Quantité</th>\n          <th>Sous-total</th>\n          <th></th>\n        </tr>\n      </thead>\n      <tbody>\n      '.concat(this.data.items.map((function(t){return'\n          <tr class="border-b">\n            <td class="py-2">\n              <a href="item.html?id='.concat(t.id,'">\n                <span class="inline-block w-full uppercase font-semibold">Peluche "').concat(t.name,'"</span>\n                <span class="inline-block text-sm">Ref: ').concat(t.id,'</span>\n              </a>\n            </td>\n            <td id="price-').concat(t.id,'" data-price="').concat(t.price,'" class="text-center py-2">\n              ').concat(d(t.price),'\n            </td>\n            <td class="text-center py-2">\n              <input type="number" min="1" data-id="').concat(t.id,'" value="').concat(t.quantity,'"\n              class="quantity inline-block w-16 py-2 px-1 rounded-md border text-center"\n              />\n            </td>\n            <td id="total-').concat(t.id,'" data-total="').concat(t.price*t.quantity,'" class="total-per-item text-center py-2">').concat(d(t.price*t.quantity),'</td>\n            <td class="px-4">\n              <button title="Supprimer l\'article du panier" data-id="').concat(t.id,'" class="remove text-lg text-red-400">&#10006;</button>\n            </td>\n          </tr>\n        ')})).join(""),'\n      </tbody>\n      <tfoot>\n        <tr class="font-bold">\n          <td>\n            <button id="clear-cart" class="border border-red-400 text-red-500 py-2 px-4 rounded-md hover:bg-red-400 hover:text-white">\n              Vider mon panier\n                </button>\n          </td>\n          <td></td>\n          <td class="py-4 text-center uppercase">Total T.T.C:</td>\n          <td class="py-4 text-center">\n            <div id="cart-total" class="text-2xl">\n              ').concat(d(this.data.total),"\n            </div>\n          </td>\n        </tr>\n      </tfoot>\n    ");var n=document.createElement("div");n.classList.add("mt-16","text-right"),n.innerHTML='\n      <button id="confirm-cart" class="inline-block px-4 py-2 border text-blue-500 border-blue-500 rounded-md font-medium hover:bg-blue-500 hover:text-white">\n        Valider le panier\n      </button>\n    ',t.appendChild(e),t.appendChild(n),this.template=t,this.updatePrice(),this.remove()}}]),t}(),h=function(){function t(){o()(this,t),this.template=null,this.data={},this.errors=[]}return s()(t,[{key:"injectTo",value:function(t){this.toHTML(),t.appendChild(this.template)}},{key:"validate",value:function(){this.errors=[];var t=document.querySelector("#lastname").value||null,e=document.querySelector("#firstname").value||null,n=document.querySelector("#address").value||null,r=document.querySelector("#address-complement").value||null,a=document.querySelector("#zip").value||null,i=document.querySelector("#city").value||null,o=document.querySelector("#email").value||null,l=document.querySelector("#email-confirm").value||null;return o!==l&&this.errors.push("Les adresses email ne correspondent pas"),l&&(this.data={lastName:t,firstName:e,address:n,addressComplement:r,zip:a,city:i,email:o,emailConfirmation:l}),!this.errors.length||(this.showErrors(),!1)}},{key:"onSubmit",value:function(t){var e=this;this.template.querySelector("#contact").addEventListener("submit",(function(n){if(n.preventDefault(),e.validate()){var r={lastName:e.data.lastName,firstName:e.data.firstName,address:e.data.address,city:e.data.city,email:e.data.email};t(r)}}))}},{key:"toHTML",value:function(){var t,e,n,r,a,i,o,l,s=document.createElement("div");s.classList.add("mt-16","max-w-screen-sm","mx-auto"),s.innerHTML='\n      <h2 class="text-center text-2xl">Informations de livraison</h2>\n      <form id="contact" class="mt-8">\n        <div class="px-4 py-2 bg-yellow-200 text-sm text-yellow-900 rounded-md">\n          <span class="mr-2">&#128712;</span>Les champs précédés d\'un\n          <strong>*</strong> sont obligatoires.\n        </div>\n        <div id="errors"></div>\n        <div class="flex flex-col gap-4 mt-8 sm:flex-row sm:gap-8">\n          <div class="flex-1">\n            <label for="lastname" class="inline-block w-full text-sm">*Nom:</label>\n            <input\n              type="text"\n              name="lastname"\n              id="lastname"\n              value="'.concat(null!==(t=this.data.lastName)&&void 0!==t?t:"",'"\n              required\n              class="w-full mt-1 px-4 py-2 border rounded-md"\n            />\n          </div>\n          <div class="flex-1">\n            <label for="firstname" class="inline-block w-full text-sm"\n              >*Prénom:</label\n            >\n            <input\n              type="text"\n              name="firstname"\n              id="firstname"\n              value="').concat(null!==(e=this.data.firstName)&&void 0!==e?e:"",'"\n              required\n              class="w-full mt-1 px-4 py-2 border rounded-md"\n            />\n          </div>\n        </div>\n        <div class="mt-4">\n          <label for="address" class="inline-block w-full text-sm">*Adresse:</label>\n          <input\n            type="text"\n            name="address"\n            id="address"\n            value="').concat(null!==(n=this.data.address)&&void 0!==n?n:"",'"\n            required\n            class="w-full mt-1 px-4 py-2 border rounded-md"\n          />\n        </div>\n        <div class="mt-4">\n          <label for="address-complement" class="inline-block w-full text-sm"\n            >Complèment d\'adresse:</label\n          >\n          <input\n            type="text"\n            name="address-complement"\n            id="address-complement"\n            value="').concat(null!==(r=this.data.addressComplement)&&void 0!==r?r:"",'"\n            class="w-full mt-1 px-4 py-2 border rounded-md"\n          />\n        </div>\n        <div class="flex flex-col gap-4 sm:flex-row sm:gap-8 mt-4">\n          <div class="flex-1">\n            <label for="zip" class="inline-block w-full text-sm"\n              >Code postal:</label\n            >\n            <input\n              type="text"\n              name="zip"\n              id="zip"\n              value="').concat(null!==(a=this.data.zip)&&void 0!==a?a:"",'"\n              class="w-full mt-1 px-4 py-2 border rounded-md"\n            />\n          </div>\n          <div class="flex-1">\n            <label for="city" class="inline-block w-full text-sm">*Ville:</label>\n            <input\n              type="text"\n              name="city"\n              id="city"\n              value="').concat(null!==(i=this.data.city)&&void 0!==i?i:"",'"\n              required\n              class="w-full mt-1 px-4 py-2 border rounded-md"\n            />\n          </div>\n        </div>\n        <div class="mt-4">\n          <label for="email" class="inline-block w-full text-sm"\n            >Adresse mail:</label\n          >\n          <input\n            type="email"\n            name="email"\n            id="email"\n            value="').concat(null!==(o=this.data.email)&&void 0!==o?o:"",'"\n            required\n            class="w-full mt-1 px-4 py-2 border rounded-md"\n          />\n        </div>\n        <div class="mt-4">\n          <label for="email-confirm" class="inline-block w-full text-sm"\n            >Confirmer l\'adresse mail:</label\n          >\n          <input\n            type="email"\n            name="email-confirm"\n            id="email-confirm"\n            value="').concat(null!==(l=this.data.emailConfirmation)&&void 0!==l?l:"",'"\n            required\n            class="w-full mt-1 px-4 py-2 border rounded-md"\n          />\n        </div>\n        <div class="mt-8 text-right">\n          <button\n            type="submit"\n            class="inline-block bg-blue-200 px-4 py-2 text-blue-900 rounded-md text-lg font-semibold hover:bg-blue-300"\n          >\n          Commander\n          </button>\n        </div>\n      </form>\n    '),this.template=s}},{key:"showErrors",value:function(){var t=document.createElement("ul");t.classList.add("mt-4"),t.innerHTML="\n      ".concat(this.errors.map((function(t){return'<li class="px-4 py-2 bg-red-200 text-sm text-red-900 rounded-md"><span class="mr-2">&#9888;</span>'.concat(t,"</li>")})),"\n    "),this.template.querySelector("#errors").appendChild(t)}}]),t}();const v='\n    <div class="text-center">\n    <p>Votre panier est vide.</p>\n    <div class="mt-12 text-center">\n      <a href="index.html"\n        class="inline-block px-4 py-2 border text-blue-500 border-blue-500 rounded-md font-medium hover:bg-blue-500 hover:text-white">\n        Découvrir nos articles\n      </a>\n    </div>\n  ';var y=new u,b=document.getElementById("order");if(y.getCount()>0){var x=new p(y.getData());x.injectTo(b),x.onCartConfirmation((function(t){var e=new h;e.injectTo(b),t.target.remove(),e.onSubmit((function(t){var e={contact:t,products:y.getItems()};new c("http://localhost:3000/api/teddies/order/").send(e).then((function(t){var e;b.innerHTML=(e=t.orderId,'\n      <div class="max-w-lg mx-auto p-8 text-green-800 bg-green-100 rounded-md border border-green-200">\n        <h2 class="text-xl text-center">Votre commande a été validée</h2>\n        <p class="mt-6">Orinoco vous remercie pour votre achat.</p>\n        <p class="mt-4">\n          La commande ref: <strong>'.concat(e,'</strong> est en cours de\n          traitement et sera expédié dans les meilleurs délais.\n        </p>\n        <p class="mt-6 text-right">A bientôt sur Orinoco.</p>\n      </div>\n    ')),y.clear()}))}))})),x.onCartClear((function(){y.clear(),b.innerHTML=v}))}else b.innerHTML=v})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcmlub2NvLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXN5bmNUb0dlbmVyYXRvci5qcyIsIndlYnBhY2s6Ly9vcmlub2NvLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2suanMiLCJ3ZWJwYWNrOi8vb3Jpbm9jby8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzLmpzIiwid2VicGFjazovL29yaW5vY28vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vb3Jpbm9jby8uL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vb3Jpbm9jby93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9vcmlub2NvL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL29yaW5vY28vd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL29yaW5vY28vd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9vcmlub2NvLy4vc3JjL2pzL21vZHVsZXMvRGF0YU1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vb3Jpbm9jby8uL3NyYy9qcy9tb2R1bGVzL0NhcnRNYW5hZ2VyLmpzIiwid2VicGFjazovL29yaW5vY28vLi9zcmMvanMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vb3Jpbm9jby8uL3NyYy9qcy9jb21wb25lbnRzL1RhYmxlLmpzIiwid2VicGFjazovL29yaW5vY28vLi9zcmMvanMvY29tcG9uZW50cy9Db250YWN0Rm9ybS5qcyIsIndlYnBhY2s6Ly9vcmlub2NvLy4vc3JjL2pzL3RlbXBsYXRlcy9kZWZhdWx0TWFya3VwLmpzIiwid2VicGFjazovL29yaW5vY28vLi9zcmMvanMvb3JkZXIuanMiXSwibmFtZXMiOlsiYXN5bmNHZW5lcmF0b3JTdGVwIiwiZ2VuIiwicmVzb2x2ZSIsInJlamVjdCIsIl9uZXh0IiwiX3Rocm93Iiwia2V5IiwiYXJnIiwiaW5mbyIsInZhbHVlIiwiZXJyb3IiLCJkb25lIiwiUHJvbWlzZSIsInRoZW4iLCJtb2R1bGUiLCJleHBvcnRzIiwiZm4iLCJzZWxmIiwidGhpcyIsImFyZ3MiLCJhcmd1bWVudHMiLCJhcHBseSIsImVyciIsInVuZGVmaW5lZCIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJfZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiaSIsImxlbmd0aCIsImRlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsInByb3RvdHlwZSIsInJ1bnRpbWUiLCJPcCIsImhhc093biIsImhhc093blByb3BlcnR5IiwiJFN5bWJvbCIsIlN5bWJvbCIsIml0ZXJhdG9yU3ltYm9sIiwiaXRlcmF0b3IiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwidG9TdHJpbmdUYWciLCJkZWZpbmUiLCJvYmoiLCJ3cmFwIiwiaW5uZXJGbiIsIm91dGVyRm4iLCJ0cnlMb2NzTGlzdCIsInByb3RvR2VuZXJhdG9yIiwiR2VuZXJhdG9yIiwiZ2VuZXJhdG9yIiwiY3JlYXRlIiwiY29udGV4dCIsIkNvbnRleHQiLCJfaW52b2tlIiwic3RhdGUiLCJHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0IiwibWV0aG9kIiwiR2VuU3RhdGVFeGVjdXRpbmciLCJFcnJvciIsIkdlblN0YXRlQ29tcGxldGVkIiwiZG9uZVJlc3VsdCIsImRlbGVnYXRlIiwiZGVsZWdhdGVSZXN1bHQiLCJtYXliZUludm9rZURlbGVnYXRlIiwiQ29udGludWVTZW50aW5lbCIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiYWJydXB0IiwicmVjb3JkIiwidHJ5Q2F0Y2giLCJ0eXBlIiwiR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCIsIm1ha2VJbnZva2VNZXRob2QiLCJjYWxsIiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiZ2V0UHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsIk5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlIiwidmFsdWVzIiwiR3AiLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJmb3JFYWNoIiwiQXN5bmNJdGVyYXRvciIsIlByb21pc2VJbXBsIiwiaW52b2tlIiwicmVzdWx0IiwiX19hd2FpdCIsInVud3JhcHBlZCIsInByZXZpb3VzUHJvbWlzZSIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwicmVzdWx0TmFtZSIsIm5leHQiLCJuZXh0TG9jIiwicHVzaFRyeUVudHJ5IiwibG9jcyIsImVudHJ5IiwidHJ5TG9jIiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWZ0ZXJMb2MiLCJ0cnlFbnRyaWVzIiwicHVzaCIsInJlc2V0VHJ5RW50cnkiLCJjb21wbGV0aW9uIiwicmVzZXQiLCJpdGVyYWJsZSIsIml0ZXJhdG9yTWV0aG9kIiwiaXNOYU4iLCJjb25zdHJ1Y3RvciIsImRpc3BsYXlOYW1lIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImdlbkZ1biIsImN0b3IiLCJuYW1lIiwibWFyayIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiYXdyYXAiLCJhc3luYyIsIml0ZXIiLCJ0b1N0cmluZyIsImtleXMiLCJvYmplY3QiLCJyZXZlcnNlIiwicG9wIiwic2tpcFRlbXBSZXNldCIsInByZXYiLCJjaGFyQXQiLCJzbGljZSIsInN0b3AiLCJyb290UmVjb3JkIiwicnZhbCIsImV4Y2VwdGlvbiIsImhhbmRsZSIsImxvYyIsImNhdWdodCIsImhhc0NhdGNoIiwiaGFzRmluYWxseSIsImZpbmFsbHlFbnRyeSIsImNvbXBsZXRlIiwiZmluaXNoIiwidGhyb3duIiwiZGVsZWdhdGVZaWVsZCIsInJlZ2VuZXJhdG9yUnVudGltZSIsImFjY2lkZW50YWxTdHJpY3RNb2RlIiwiRnVuY3Rpb24iLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibiIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJvIiwiZ2V0IiwicHJvcCIsImFwaSIsImlkIiwiZmV0Y2giLCJyZXNwb25zZSIsImpzb24iLCJkYXRhIiwiY29uc29sZSIsImZldGNoRGF0YSIsIm9yZGVyIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJoZWFkZXJzIiwicmVxdWVzdCIsIml0ZW1zIiwidG90YWwiLCJpbml0IiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsImNhcnQiLCJwYXJzZSIsIm5ld0l0ZW0iLCJkdXBsaWNhdGUiLCJtYXAiLCJpdGVtIiwicXVhbnRpdHkiLCJzYXZlIiwiZmlsdGVyIiwicmVkdWNlIiwiY3VycmVudCIsInByaWNlIiwic2V0VG90YWwiLCJjYXJ0SW5mb3JtYXRpb25zIiwic2V0SXRlbSIsImNsZWFyIiwiZm9ybWF0UHJpY2UiLCJ0b0ZpeGVkIiwidGVtcGxhdGUiLCJjYiIsInF1ZXJ5U2VsZWN0b3IiLCJhZGRFdmVudExpc3RlbmVyIiwibW91bnRQb2ludCIsInRvSFRNTCIsImFwcGVuZENoaWxkIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImV2ZW50IiwiaXRlbUlkIiwiZGF0YXNldCIsInVuaXRQcmljZSIsInBhcnNlSW50IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInN0b3JlIiwiQ2FydE1hbmFnZXIiLCJ0ZXh0Q29udGVudCIsInVwZGF0ZUl0ZW0iLCJyZW1vdmUiLCJyZW1vdmVJdGVtIiwid2luZG93IiwibG9jYXRpb24iLCJyZWxvYWQiLCJ0b3RhbFBlckl0ZW0iLCJjYXJ0VG90YWwiLCJjb250YWluZXIiLCJjcmVhdGVFbGVtZW50IiwidGFibGUiLCJjbGFzc0xpc3QiLCJhZGQiLCJpbm5lckhUTUwiLCJqb2luIiwiY3RhIiwidXBkYXRlUHJpY2UiLCJDb250YWN0Rm9ybSIsImVycm9ycyIsImxhc3ROYW1lIiwiZmlyc3ROYW1lIiwiYWRkcmVzcyIsImFkZHJlc3NDb21wbGVtZW50IiwiemlwIiwiY2l0eSIsImVtYWlsIiwiZW1haWxDb25maXJtYXRpb24iLCJzaG93RXJyb3JzIiwicHJldmVudERlZmF1bHQiLCJ2YWxpZGF0ZSIsImZvcm0iLCJlcnJvckxpc3QiLCJjYXJ0TW91bnRQb2ludCIsImdldENvdW50Iiwic3VtbWFyeSIsIlRhYmxlIiwiZ2V0RGF0YSIsImluamVjdFRvIiwib25DYXJ0Q29uZmlybWF0aW9uIiwib25TdWJtaXQiLCJjb250YWN0IiwicHJvZHVjdHMiLCJnZXRJdGVtcyIsIkRhdGFNYW5hZ2VyIiwic2VuZCIsIm9yZGVySWQiLCJvbkNhcnRDbGVhciIsImRlZmF1bHRNYXJrdXAiXSwibWFwcGluZ3MiOiJxQkFBQSxTQUFTQSxFQUFtQkMsRUFBS0MsRUFBU0MsRUFBUUMsRUFBT0MsRUFBUUMsRUFBS0MsR0FDcEUsSUFDRSxJQUFJQyxFQUFPUCxFQUFJSyxHQUFLQyxHQUNoQkUsRUFBUUQsRUFBS0MsTUFDakIsTUFBT0MsR0FFUCxZQURBUCxFQUFPTyxHQUlMRixFQUFLRyxLQUNQVCxFQUFRTyxHQUVSRyxRQUFRVixRQUFRTyxHQUFPSSxLQUFLVCxFQUFPQyxHQXdCdkNTLEVBQU9DLFFBcEJQLFNBQTJCQyxHQUN6QixPQUFPLFdBQ0wsSUFBSUMsRUFBT0MsS0FDUEMsRUFBT0MsVUFDWCxPQUFPLElBQUlSLFNBQVEsU0FBVVYsRUFBU0MsR0FDcEMsSUFBSUYsRUFBTWUsRUFBR0ssTUFBTUosRUFBTUUsR0FFekIsU0FBU2YsRUFBTUssR0FDYlQs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UzFGLEVBQ1QyRixTQUFVN0UsRUFBSzhFLFlBSUwsSUFBSUMsRUFBWSw0Q0FHeEJDLEtBQUszRixHQUNOekssTUFBSyxTQUFBc0ssR0RyQ0MsSUFxQkFKLEVDaUJMc0YsRUFBZW5CLFdEakJWbkUsRUNpQmlESSxFQUFLK0YsUURoQmpFLGtVQUtpQ25HLEVBTGpDLGdNQ2lCTWtCLEVBQUtlLGlCQU9idUQsRUFBUVksYUFBWSxXQUNsQmxGLEVBQUtlLFFBQ0xxRCxFQUFlbkIsVUFBWWtDLFVBSTdCZixFQUFlbkIsVUFBWWtDLEciLCJmaWxlIjoib3JkZXIuYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykge1xuICB0cnkge1xuICAgIHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTtcbiAgICB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJlamVjdChlcnJvcik7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGluZm8uZG9uZSkge1xuICAgIHJlc29sdmUodmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgYXJncyA9IGFyZ3VtZW50cztcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuXG4gICAgICBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkge1xuICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwibmV4dFwiLCB2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIF90aHJvdyhlcnIpIHtcbiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcInRocm93XCIsIGVycik7XG4gICAgICB9XG5cbiAgICAgIF9uZXh0KHVuZGVmaW5lZCk7XG4gICAgfSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2FzeW5jVG9HZW5lcmF0b3I7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfY2xhc3NDYWxsQ2hlY2s7IiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9jcmVhdGVDbGFzczsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWdlbmVyYXRvci1ydW50aW1lXCIpO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG52YXIgcnVudGltZSA9IChmdW5jdGlvbiAoZXhwb3J0cykge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHk7XG4gIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICB2YXIgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBcIkBAYXN5bmNJdGVyYXRvclwiO1xuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIGZ1bmN0aW9uIGRlZmluZShvYmosIGtleSwgdmFsdWUpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBvYmpba2V5XTtcbiAgfVxuICB0cnkge1xuICAgIC8vIElFIDggaGFzIGEgYnJva2VuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSB0aGF0IG9ubHkgd29ya3Mgb24gRE9NIG9iamVjdHMuXG4gICAgZGVmaW5lKHt9LCBcIlwiKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZGVmaW5lID0gZnVuY3Rpb24ob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgICByZXR1cm4gb2JqW2tleV0gPSB2YWx1ZTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQgYW5kIG91dGVyRm4ucHJvdG90eXBlIGlzIGEgR2VuZXJhdG9yLCB0aGVuIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yLlxuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yO1xuICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG5cbiAgICAvLyBUaGUgLl9pbnZva2UgbWV0aG9kIHVuaWZpZXMgdGhlIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzLlxuICAgIGdlbmVyYXRvci5faW52b2tlID0gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcblxuICAgIHJldHVybiBnZW5lcmF0b3I7XG4gIH1cbiAgZXhwb3J0cy53cmFwID0gd3JhcDtcblxuICAvLyBUcnkvY2F0Y2ggaGVscGVyIHRvIG1pbmltaXplIGRlb3B0aW1pemF0aW9ucy4gUmV0dXJucyBhIGNvbXBsZXRpb25cbiAgLy8gcmVjb3JkIGxpa2UgY29udGV4dC50cnlFbnRyaWVzW2ldLmNvbXBsZXRpb24uIFRoaXMgaW50ZXJmYWNlIGNvdWxkXG4gIC8vIGhhdmUgYmVlbiAoYW5kIHdhcyBwcmV2aW91c2x5KSBkZXNpZ25lZCB0byB0YWtlIGEgY2xvc3VyZSB0byBiZVxuICAvLyBpbnZva2VkIHdpdGhvdXQgYXJndW1lbnRzLCBidXQgaW4gYWxsIHRoZSBjYXNlcyB3ZSBjYXJlIGFib3V0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhbiBleGlzdGluZyBtZXRob2Qgd2Ugd2FudCB0byBjYWxsLCBzbyB0aGVyZSdzIG5vIG5lZWRcbiAgLy8gdG8gY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIG9iamVjdC4gV2UgY2FuIGV2ZW4gZ2V0IGF3YXkgd2l0aCBhc3N1bWluZ1xuICAvLyB0aGUgbWV0aG9kIHRha2VzIGV4YWN0bHkgb25lIGFyZ3VtZW50LCBzaW5jZSB0aGF0IGhhcHBlbnMgdG8gYmUgdHJ1ZVxuICAvLyBpbiBldmVyeSBjYXNlLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHRvdWNoIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBUaGVcbiAgLy8gb25seSBhZGRpdGlvbmFsIGFsbG9jYXRpb24gcmVxdWlyZWQgaXMgdGhlIGNvbXBsZXRpb24gcmVjb3JkLCB3aGljaFxuICAvLyBoYXMgYSBzdGFibGUgc2hhcGUgYW5kIHNvIGhvcGVmdWxseSBzaG91bGQgYmUgY2hlYXAgdG8gYWxsb2NhdGUuXG4gIGZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcIm5vcm1hbFwiLCBhcmc6IGZuLmNhbGwob2JqLCBhcmcpIH07XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcInRocm93XCIsIGFyZzogZXJyIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkU3RhcnQgPSBcInN1c3BlbmRlZFN0YXJ0XCI7XG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkID0gXCJzdXNwZW5kZWRZaWVsZFwiO1xuICB2YXIgR2VuU3RhdGVFeGVjdXRpbmcgPSBcImV4ZWN1dGluZ1wiO1xuICB2YXIgR2VuU3RhdGVDb21wbGV0ZWQgPSBcImNvbXBsZXRlZFwiO1xuXG4gIC8vIFJldHVybmluZyB0aGlzIG9iamVjdCBmcm9tIHRoZSBpbm5lckZuIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXNcbiAgLy8gYnJlYWtpbmcgb3V0IG9mIHRoZSBkaXNwYXRjaCBzd2l0Y2ggc3RhdGVtZW50LlxuICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9O1xuXG4gIC8vIER1bW15IGNvbnN0cnVjdG9yIGZ1bmN0aW9ucyB0aGF0IHdlIHVzZSBhcyB0aGUgLmNvbnN0cnVjdG9yIGFuZFxuICAvLyAuY29uc3RydWN0b3IucHJvdG90eXBlIHByb3BlcnRpZXMgZm9yIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0cy4gRm9yIGZ1bGwgc3BlYyBjb21wbGlhbmNlLCB5b3UgbWF5IHdpc2ggdG8gY29uZmlndXJlIHlvdXJcbiAgLy8gbWluaWZpZXIgbm90IHRvIG1hbmdsZSB0aGUgbmFtZXMgb2YgdGhlc2UgdHdvIGZ1bmN0aW9ucy5cbiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9XG5cbiAgLy8gVGhpcyBpcyBhIHBvbHlmaWxsIGZvciAlSXRlcmF0b3JQcm90b3R5cGUlIGZvciBlbnZpcm9ubWVudHMgdGhhdFxuICAvLyBkb24ndCBuYXRpdmVseSBzdXBwb3J0IGl0LlxuICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbiAgSXRlcmF0b3JQcm90b3R5cGVbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgdmFyIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xuICBpZiAoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiZcbiAgICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPcCAmJlxuICAgICAgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSkge1xuICAgIC8vIFRoaXMgZW52aXJvbm1lbnQgaGFzIGEgbmF0aXZlICVJdGVyYXRvclByb3RvdHlwZSU7IHVzZSBpdCBpbnN0ZWFkXG4gICAgLy8gb2YgdGhlIHBvbHlmaWxsLlxuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cblxuICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPVxuICAgIEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR3AuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvbjtcbiAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBkZWZpbmUoXG4gICAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsXG4gICAgdG9TdHJpbmdUYWdTeW1ib2wsXG4gICAgXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICk7XG5cbiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGVcbiAgLy8gSXRlcmF0b3IgaW50ZXJmYWNlIGluIHRlcm1zIG9mIGEgc2luZ2xlIC5faW52b2tlIG1ldGhvZC5cbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgZGVmaW5lKHByb3RvdHlwZSwgbWV0aG9kLCBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIGV4cG9ydHMubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgZGVmaW5lKGdlbkZ1biwgdG9TdHJpbmdUYWdTeW1ib2wsIFwiR2VuZXJhdG9yRnVuY3Rpb25cIik7XG4gICAgfVxuICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTtcbiAgICByZXR1cm4gZ2VuRnVuO1xuICB9O1xuXG4gIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0b1xuICAvLyBgeWllbGQgcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHgpYCwgc28gdGhhdCB0aGUgcnVudGltZSBjYW4gdGVzdFxuICAvLyBgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKWAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuXG4gIGV4cG9ydHMuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4geyBfX2F3YWl0OiBhcmcgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvciwgUHJvbWlzZUltcGwpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHtcbiAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lc1xuICAgICAgICAgIC8vIHRoZSAudmFsdWUgb2YgdGhlIFByb21pc2U8e3ZhbHVlLGRvbmV9PiByZXN1bHQgZm9yIHRoZVxuICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLlxuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgLy8gSWYgYSByZWplY3RlZCBQcm9taXNlIHdhcyB5aWVsZGVkLCB0aHJvdyB0aGUgcmVqZWN0aW9uIGJhY2tcbiAgICAgICAgICAvLyBpbnRvIHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gc28gaXQgY2FuIGJlIGhhbmRsZWQgdGhlcmUuXG4gICAgICAgICAgcmV0dXJuIGludm9rZShcInRocm93XCIsIGVycm9yLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcHJldmlvdXNQcm9taXNlO1xuXG4gICAgZnVuY3Rpb24gZW5xdWV1ZShtZXRob2QsIGFyZykge1xuICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZUltcGwoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBBc3luY0l0ZXJhdG9yLnByb3RvdHlwZVthc3luY0l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgZXhwb3J0cy5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgZXhwb3J0cy5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0LCBQcm9taXNlSW1wbCkge1xuICAgIGlmIChQcm9taXNlSW1wbCA9PT0gdm9pZCAwKSBQcm9taXNlSW1wbCA9IFByb21pc2U7XG5cbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKFxuICAgICAgd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCksXG4gICAgICBQcm9taXNlSW1wbFxuICAgICk7XG5cbiAgICByZXR1cm4gZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pXG4gICAgICA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLlxuICAgICAgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgICAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7XG4gICAgICAgIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJlIGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6XG4gICAgICAgIC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1nZW5lcmF0b3JyZXN1bWVcbiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5tZXRob2QgPSBtZXRob2Q7XG4gICAgICBjb250ZXh0LmFyZyA9IGFyZztcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG4gICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aHJvdyBjb250ZXh0LmFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcblxuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT1cbiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uXG4gICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgID8gR2VuU3RhdGVDb21wbGV0ZWRcbiAgICAgICAgICAgIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXG4gICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICB9O1xuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIENhbGwgZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdKGNvbnRleHQuYXJnKSBhbmQgaGFuZGxlIHRoZVxuICAvLyByZXN1bHQsIGVpdGhlciBieSByZXR1cm5pbmcgYSB7IHZhbHVlLCBkb25lIH0gcmVzdWx0IGZyb20gdGhlXG4gIC8vIGRlbGVnYXRlIGl0ZXJhdG9yLCBvciBieSBtb2RpZnlpbmcgY29udGV4dC5tZXRob2QgYW5kIGNvbnRleHQuYXJnLFxuICAvLyBzZXR0aW5nIGNvbnRleHQuZGVsZWdhdGUgdG8gbnVsbCwgYW5kIHJldHVybmluZyB0aGUgQ29udGludWVTZW50aW5lbC5cbiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07XG4gICAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBBIC50aHJvdyBvciAucmV0dXJuIHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyAudGhyb3dcbiAgICAgIC8vIG1ldGhvZCBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuXG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgLy8gTm90ZTogW1wicmV0dXJuXCJdIG11c3QgYmUgdXNlZCBmb3IgRVMzIHBhcnNpbmcgY29tcGF0aWJpbGl0eS5cbiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yW1wicmV0dXJuXCJdKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgZGVmaW5lKEdwLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JcIik7XG5cbiAgLy8gQSBHZW5lcmF0b3Igc2hvdWxkIGFsd2F5cyByZXR1cm4gaXRzZWxmIGFzIHRoZSBpdGVyYXRvciBvYmplY3Qgd2hlbiB0aGVcbiAgLy8gQEBpdGVyYXRvciBmdW5jdGlvbiBpcyBjYWxsZWQgb24gaXQuIFNvbWUgYnJvd3NlcnMnIGltcGxlbWVudGF0aW9ucyBvZiB0aGVcbiAgLy8gaXRlcmF0b3IgcHJvdG90eXBlIGNoYWluIGluY29ycmVjdGx5IGltcGxlbWVudCB0aGlzLCBjYXVzaW5nIHRoZSBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0IHRvIG5vdCBiZSByZXR1cm5lZCBmcm9tIHRoaXMgY2FsbC4gVGhpcyBlbnN1cmVzIHRoYXQgZG9lc24ndCBoYXBwZW4uXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvaXNzdWVzLzI3NCBmb3IgbW9yZSBkZXRhaWxzLlxuICBHcFtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBHcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTtcblxuICAgIGlmICgxIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoMiBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXTtcbiAgICAgIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXTtcbiAgICB9XG5cbiAgICB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307XG4gICAgcmVjb3JkLnR5cGUgPSBcIm5vcm1hbFwiO1xuICAgIGRlbGV0ZSByZWNvcmQuYXJnO1xuICAgIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XG4gIH1cblxuICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gVGhlIHJvb3QgZW50cnkgb2JqZWN0IChlZmZlY3RpdmVseSBhIHRyeSBzdGF0ZW1lbnQgd2l0aG91dCBhIGNhdGNoXG4gICAgLy8gb3IgYSBmaW5hbGx5IGJsb2NrKSBnaXZlcyB1cyBhIHBsYWNlIHRvIHN0b3JlIHZhbHVlcyB0aHJvd24gZnJvbVxuICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC5cbiAgICB0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6IFwicm9vdFwiIH1dO1xuICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTtcbiAgICB0aGlzLnJlc2V0KHRydWUpO1xuICB9XG5cbiAgZXhwb3J0cy5rZXlzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gICAga2V5cy5yZXZlcnNlKCk7XG5cbiAgICAvLyBSYXRoZXIgdGhhbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYSBuZXh0IG1ldGhvZCwgd2Uga2VlcFxuICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB3aGlsZSAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7XG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgbmV4dC52YWx1ZSA9IGtleTtcbiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWVcbiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzXG4gICAgICAvLyBhbHNvIGVuc3VyZXMgdGhhdCB0aGUgbWluaWZpZXIgd2lsbCBub3QgYW5vbnltaXplIHRoZSBmdW5jdGlvbi5cbiAgICAgIG5leHQuZG9uZSA9IHRydWU7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO1xuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IGl0ZXJhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07XG4gICAgICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG5leHQuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYW4gaXRlcmF0b3Igd2l0aCBubyB2YWx1ZXMuXG4gICAgcmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9O1xuICB9XG4gIGV4cG9ydHMudmFsdWVzID0gdmFsdWVzO1xuXG4gIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG5cbiAgICByZXNldDogZnVuY3Rpb24oc2tpcFRlbXBSZXNldCkge1xuICAgICAgdGhpcy5wcmV2ID0gMDtcbiAgICAgIHRoaXMubmV4dCA9IDA7XG4gICAgICAvLyBSZXNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpO1xuXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmXG4gICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmXG4gICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247XG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcblxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcblxuICAgICAgICBpZiAoY2F1Z2h0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRpc3BhdGNoZWQgZXhjZXB0aW9uIHdhcyBjYXVnaHQgYnkgYSBjYXRjaCBibG9jayxcbiAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gISEgY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gXCJyb290XCIpIHtcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgIHR5cGUgPT09IFwiY29udGludWVcIikgJiZcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gXCJlbmRcIjtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIgJiYgYWZ0ZXJMb2MpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH0sXG5cbiAgICBmaW5pc2g6IGZ1bmN0aW9uKGZpbmFsbHlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykge1xuICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpO1xuICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24odHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uXG4gICAgICAvLyBhcmd1bWVudCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEga25vd24gY2F0Y2ggYmxvY2suXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIik7XG4gICAgfSxcblxuICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uKGl0ZXJhYmxlLCByZXN1bHROYW1lLCBuZXh0TG9jKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlID0ge1xuICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSxcbiAgICAgICAgcmVzdWx0TmFtZTogcmVzdWx0TmFtZSxcbiAgICAgICAgbmV4dExvYzogbmV4dExvY1xuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxuICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuXG4gICAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH07XG5cbiAgLy8gUmVnYXJkbGVzcyBvZiB3aGV0aGVyIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZVxuICAvLyBvciBub3QsIHJldHVybiB0aGUgcnVudGltZSBvYmplY3Qgc28gdGhhdCB3ZSBjYW4gZGVjbGFyZSB0aGUgdmFyaWFibGVcbiAgLy8gcmVnZW5lcmF0b3JSdW50aW1lIGluIHRoZSBvdXRlciBzY29wZSwgd2hpY2ggYWxsb3dzIHRoaXMgbW9kdWxlIHRvIGJlXG4gIC8vIGluamVjdGVkIGVhc2lseSBieSBgYmluL3JlZ2VuZXJhdG9yIC0taW5jbHVkZS1ydW50aW1lIHNjcmlwdC5qc2AuXG4gIHJldHVybiBleHBvcnRzO1xuXG59KFxuICAvLyBJZiB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGUsIHVzZSBtb2R1bGUuZXhwb3J0c1xuICAvLyBhcyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIG5hbWVzcGFjZS4gT3RoZXJ3aXNlIGNyZWF0ZSBhIG5ldyBlbXB0eVxuICAvLyBvYmplY3QuIEVpdGhlciB3YXksIHRoZSByZXN1bHRpbmcgb2JqZWN0IHdpbGwgYmUgdXNlZCB0byBpbml0aWFsaXplXG4gIC8vIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgdmFyaWFibGUgYXQgdGhlIHRvcCBvZiB0aGlzIGZpbGUuXG4gIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgPyBtb2R1bGUuZXhwb3J0cyA6IHt9XG4pKTtcblxudHJ5IHtcbiAgcmVnZW5lcmF0b3JSdW50aW1lID0gcnVudGltZTtcbn0gY2F0Y2ggKGFjY2lkZW50YWxTdHJpY3RNb2RlKSB7XG4gIC8vIFRoaXMgbW9kdWxlIHNob3VsZCBub3QgYmUgcnVubmluZyBpbiBzdHJpY3QgbW9kZSwgc28gdGhlIGFib3ZlXG4gIC8vIGFzc2lnbm1lbnQgc2hvdWxkIGFsd2F5cyB3b3JrIHVubGVzcyBzb21ldGhpbmcgaXMgbWlzY29uZmlndXJlZC4gSnVzdFxuICAvLyBpbiBjYXNlIHJ1bnRpbWUuanMgYWNjaWRlbnRhbGx5IHJ1bnMgaW4gc3RyaWN0IG1vZGUsIHdlIGNhbiBlc2NhcGVcbiAgLy8gc3RyaWN0IG1vZGUgdXNpbmcgYSBnbG9iYWwgRnVuY3Rpb24gY2FsbC4gVGhpcyBjb3VsZCBjb25jZWl2YWJseSBmYWlsXG4gIC8vIGlmIGEgQ29udGVudCBTZWN1cml0eSBQb2xpY3kgZm9yYmlkcyB1c2luZyBGdW5jdGlvbiwgYnV0IGluIHRoYXQgY2FzZVxuICAvLyB0aGUgcHJvcGVyIHNvbHV0aW9uIGlzIHRvIGZpeCB0aGUgYWNjaWRlbnRhbCBzdHJpY3QgbW9kZSBwcm9ibGVtLiBJZlxuICAvLyB5b3UndmUgbWlzY29uZmlndXJlZCB5b3VyIGJ1bmRsZXIgdG8gZm9yY2Ugc3RyaWN0IG1vZGUgYW5kIGFwcGxpZWQgYVxuICAvLyBDU1AgdG8gZm9yYmlkIEZ1bmN0aW9uLCBhbmQgeW91J3JlIG5vdCB3aWxsaW5nIHRvIGZpeCBlaXRoZXIgb2YgdGhvc2VcbiAgLy8gcHJvYmxlbXMsIHBsZWFzZSBkZXRhaWwgeW91ciB1bmlxdWUgcHJlZGljYW1lbnQgaW4gYSBHaXRIdWIgaXNzdWUuXG4gIEZ1bmN0aW9uKFwiclwiLCBcInJlZ2VuZXJhdG9yUnVudGltZSA9IHJcIikocnVudGltZSk7XG59XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHRpZihfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdKSB7XG5cdFx0cmV0dXJuIF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0uZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IG1vZHVsZVsnZGVmYXVsdCddIDpcblx0XHQoKSA9PiBtb2R1bGU7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIHtcblxuICBjb25zdHJ1Y3RvcihhcGkpIHtcbiAgICB0aGlzLmFwaSA9IGFwaTtcbiAgfVxuXG4gIGFzeW5jIGZldGNoRGF0YShpZCA9IG51bGwpIHtcbiAgICB0cnkge1xuICAgICAgbGV0IHJlc3BvbnNlO1xuXG4gICAgICAvLyBTZW5kIHJlcXVlc3QgdG8gQVBJIHRoZW4gd2FpdCBmb3IgdGhlIHJlc3BvbnNlXG4gICAgICBpZiAoaWQpIHtcbiAgICAgICAgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh0aGlzLmFwaSArIGlkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godGhpcy5hcGkpO1xuICAgICAgfVxuXG4gICAgICAvLyBDb252ZXJ0IHJlc3BvbnNlIHRvIGpzb25cbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG5cbiAgICAgIHJldHVybiBkYXRhO1xuXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0xhIGNvbm5lY3Rpb24gYXZlYyBsZSBzZXJ2ZXVyIG5cXCdhIHB1IMOqdHJlIMOpdGFibGllLlxcbicgKyBlcnJvcik7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZmV0Y2goaWQpIHtcbiAgICAvLyBDYWxsIGZldGNoRGF0YSB3aXRoIHBhcmFtZXRlciA9PiByZXR1cm4gMSBpdGVtXG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuZmV0Y2hEYXRhKGlkKTtcbiAgfVxuXG4gIGFzeW5jIGZldGNoQWxsKCkge1xuICAgIC8vIENhbGwgZmV0Y2hEYXRhIHdpdGhvdXQgcGFyYW1ldGVyID0+IHJldHVybiBhbGwgaXRlbXNcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5mZXRjaERhdGEoKTtcbiAgfVxuXG4gIGFzeW5jIHNlbmQob3JkZXIpIHtcbiAgICAvLyBTZW5kIGRhdGEgdG8gdGhlIGFwaSB2aWEgUE9TVCByZXF1ZXN0XG4gICAgY29uc3QgcmVxdWVzdCA9IGF3YWl0IGZldGNoKHRoaXMuYXBpLCB7XG4gICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkob3JkZXIpLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICBcIkNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9VVRGLThcIlxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgY29uc3QgcmVzcG9uc2UgPSByZXF1ZXN0Lmpzb24oKTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfVxuXG5cbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyB7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5pdGVtcyA9IFtdO1xuICAgIHRoaXMudG90YWwgPSAwO1xuICAgIHRoaXMuaW5pdCgpO1xuICB9XG5cbiAgaW5pdCgpIHtcbiAgICAvLyBDaGVjayBpZiBhIGNhcnQgaGFzIGJlZW4gc2F2ZWQgdGhlbiBsb2FkIGl0XG4gICAgaWYgKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdjYXJ0JykpIHtcbiAgICAgIGNvbnN0IGNhcnQgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdjYXJ0JykpO1xuICAgICAgdGhpcy5pdGVtcyA9IGNhcnQuaXRlbXM7XG4gICAgICB0aGlzLnRvdGFsID0gY2FydC50b3RhbDtcbiAgICB9XG4gIH1cblxuICBhZGRJdGVtKG5ld0l0ZW0pIHtcbiAgICBsZXQgZHVwbGljYXRlID0gZmFsc2U7XG5cbiAgICAvLyBDaGVjayBpZiBpdGVtIHJlZmVyZW5jZSBpcyBpbiBjYXJ0IHRvIHVwZGF0ZSBxdWFudGl0eVxuICAgIHRoaXMuaXRlbXMubWFwKGl0ZW0gPT4ge1xuICAgICAgaWYgKGl0ZW0uaWQgPT09IG5ld0l0ZW0uaWQpIHtcbiAgICAgICAgaXRlbS5xdWFudGl0eSArPSBuZXdJdGVtLnF1YW50aXR5O1xuICAgICAgICBkdXBsaWNhdGUgPSB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKCFkdXBsaWNhdGUpIHtcbiAgICAgIHRoaXMuaXRlbXMucHVzaChuZXdJdGVtKTtcbiAgICB9XG5cbiAgICAvLyBTYXZlIHRoZSBjYXJ0IGluIGxvY2FsU3RvcmFnZVxuICAgIHRoaXMuc2F2ZSgpO1xuICB9XG5cbiAgcmVtb3ZlSXRlbShpZCkge1xuICAgIHRoaXMuaXRlbXMgPSB0aGlzLml0ZW1zLmZpbHRlcihpdGVtID0+IHtcbiAgICAgIHJldHVybiBpdGVtLmlkICE9PSBpZDtcbiAgICB9KTtcblxuICAgIHRoaXMuc2F2ZSgpO1xuICB9XG5cbiAgdXBkYXRlSXRlbShpZCwgcXVhbnRpdHkpIHtcbiAgICB0aGlzLml0ZW1zLm1hcChpdGVtID0+IHtcbiAgICAgIGlmIChpdGVtLmlkID09PSBpZCkge1xuICAgICAgICBpdGVtLnF1YW50aXR5ID0gcXVhbnRpdHk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLnNhdmUoKTtcbiAgfVxuXG4gIHNldFRvdGFsKCkge1xuICAgIHRoaXMudG90YWwgPSB0aGlzLml0ZW1zLnJlZHVjZSgodG90YWwsIGN1cnJlbnQpID0+IHtcbiAgICAgIHJldHVybiB0b3RhbCArIChjdXJyZW50LnF1YW50aXR5ICogY3VycmVudC5wcmljZSk7XG4gICAgfSwgMClcbiAgfVxuXG4gIHNhdmUoKSB7XG4gICAgdGhpcy5zZXRUb3RhbCgpO1xuXG4gICAgY29uc3QgY2FydEluZm9ybWF0aW9ucyA9IHtcbiAgICAgIGl0ZW1zOiB0aGlzLml0ZW1zLFxuICAgICAgdG90YWw6IHRoaXMudG90YWxcbiAgICB9XG5cbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnY2FydCcsIEpTT04uc3RyaW5naWZ5KGNhcnRJbmZvcm1hdGlvbnMpKTtcbiAgfVxuXG4gIGNsZWFyKCkge1xuICAgIC8vIEVtcHR5IHRoZSBjYXJ0XG4gICAgdGhpcy5pdGVtcyA9IFtdO1xuICAgIC8vIFJlc2V0IHRvdGFsXG4gICAgdGhpcy50b3RhbCA9IDA7XG5cbiAgICAvLyBSZW1vdmUgc2F2ZWRcbiAgICBsb2NhbFN0b3JhZ2UuY2xlYXIoKVxuICB9XG5cbiAgZ2V0Q291bnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXRlbXMubGVuZ3RoO1xuICB9XG5cbiAgZ2V0RGF0YSgpIHtcbiAgICBjb25zdCBjYXJ0RGF0YSA9IHtcbiAgICAgIGl0ZW1zOiB0aGlzLml0ZW1zLFxuICAgICAgdG90YWw6IHRoaXMudG90YWxcbiAgICB9O1xuXG4gICAgcmV0dXJuIGNhcnREYXRhO1xuICB9XG5cbiAgZ2V0SXRlbXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXRlbXMubWFwKGl0ZW0gPT4gaXRlbS5pZClcbiAgfVxuXG59IiwiLy8gTWFrZSBwcmljZSByZWFkYWJsZSBmb3IgdXNlcnNcbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRQcmljZShwcmljZSkge1xuICBwcmljZSA9IHByaWNlIC8gMTAwO1xuXG4gIHJldHVybiBwcmljZS50b0ZpeGVkKDIpICsgJyDigqwnO1xufVxuXG5cbi8vIEdldCBpZCBmcm9tIHVybCBwYXJhbWV0ZXJzXG5leHBvcnQgZnVuY3Rpb24gZXh0cmFjdElkRnJvbVVybCgpIHtcbiAgY29uc3QgaWQgPSB3aW5kb3cubG9jYXRpb24uc2VhcmNoLnNwbGl0KFwiPVwiKVsxXTtcblxuICBpZiAoIWlkKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gaWQ7XG59XG5cbi8vIEFuaW1hdGUgY2FydCBidXR0b24gd2hlbiBhbiBpdGVtIGhhcyBiZWVuIGFkZGVkXG5leHBvcnQgZnVuY3Rpb24gYW5pbWF0ZUNhcnRCdG4oKSB7XG4gIGNvbnN0IGNhcnRCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY2FydC1idG4nKTtcblxuICAvLyBBZGQgdGhlIGFuaW1hdGlvblxuICBjYXJ0QnRuLmNsYXNzTGlzdC5hZGQoJ2FuaW1hdGUnKTtcblxuICAvLyBSZW1vdmUgdGhlIGFuaW1hdGlvbiB3aGVuIGNvbXBsZXRlZFxuICBjYXJ0QnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2FuaW1hdGlvbmVuZCcsIChldmVudCkgPT4ge1xuICAgIGV2ZW50LnRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKCdhbmltYXRlJylcbiAgfSlcbn0iLCJpbXBvcnQgQ2FydE1hbmFnZXIgZnJvbSAnLi4vbW9kdWxlcy9DYXJ0TWFuYWdlcic7XG5pbXBvcnQgeyBmb3JtYXRQcmljZSB9IGZyb20gJy4uL3V0aWxzLmpzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3Mge1xuXG4gIGNvbnN0cnVjdG9yKGRhdGEpIHtcbiAgICB0aGlzLnRlbXBsYXRlID0gbnVsbDtcbiAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICB9XG5cbiAgLy8gUHJvY2VzcyBjbGljayBvbiBcImNsZWFyLWNhcnRcIiBidXR0b25cbiAgb25DYXJ0Q2xlYXIoY2IpIHtcbiAgICBjb25zdCBjYXJ0Q2xlYXJCdG4gPSB0aGlzLnRlbXBsYXRlLnF1ZXJ5U2VsZWN0b3IoJyNjbGVhci1jYXJ0Jyk7XG5cbiAgICBjYXJ0Q2xlYXJCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjYik7XG4gIH1cblxuXG4gIG9uQ2FydENvbmZpcm1hdGlvbihjYikge1xuICAgIGNvbnN0IGNvbmZpcm1DYXJ0QnRuID0gdGhpcy50ZW1wbGF0ZS5xdWVyeVNlbGVjdG9yKCcjY29uZmlybS1jYXJ0Jyk7XG5cbiAgICBjb25maXJtQ2FydEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGNiKTtcbiAgfVxuXG4gIGluamVjdFRvKG1vdW50UG9pbnQpIHtcbiAgICAvLyBDcmVhdGUgbWFya3VwIHRoZW4gaW5qZWN0IGl0IGludG8gc2VsZWN0ZWQgZWxlbWVudCAobW91bnRQb2ludCkgaW4gdGhlIERPTVxuICAgIHRoaXMudG9IVE1MKCk7XG4gICAgbW91bnRQb2ludC5hcHBlbmRDaGlsZCh0aGlzLnRlbXBsYXRlKTtcbiAgfVxuXG4gIC8vIFJlLWNhbGN1bGF0ZSBjYXJ0IHByaWNlcyB3aGVuIHVzZXIgY2hhbmdlcyBpdGVtcyBxdWFudGl0aWVzIFxuICB1cGRhdGVQcmljZSgpIHtcbiAgICBjb25zdCBxdWFudGl0eSA9IHRoaXMudGVtcGxhdGUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgncXVhbnRpdHknKTtcblxuICAgIGZvciAobGV0IHF0eSBvZiBxdWFudGl0eSkge1xuICAgICAgcXR5LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCBpdGVtSWQgPSBldmVudC50YXJnZXQuZGF0YXNldC5pZDtcbiAgICAgICAgY29uc3QgdW5pdFByaWNlID0gcGFyc2VJbnQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYHByaWNlLSR7aXRlbUlkfWApLmRhdGFzZXQucHJpY2UpO1xuICAgICAgICBjb25zdCB0b3RhbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGB0b3RhbC0ke2l0ZW1JZH1gKVxuICAgICAgICBjb25zdCBzdG9yZSA9IG5ldyBDYXJ0TWFuYWdlcigpO1xuXG4gICAgICAgIC8vIFVwZGF0ZSBkaXNwbGF5ZWQgcHJpY2VzXG4gICAgICAgIHRvdGFsLnRleHRDb250ZW50ID0gZm9ybWF0UHJpY2UodW5pdFByaWNlICogZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICAgICAgdG90YWwuZGF0YXNldC50b3RhbCA9IHBhcnNlSW50KHVuaXRQcmljZSAqIGV2ZW50LnRhcmdldC52YWx1ZSlcbiAgICAgICAgdGhpcy5zZXRUb3RhbCgpO1xuXG4gICAgICAgIC8vIFNhdmUgY2hhbmdlcyBvbiBjYXJ0XG4gICAgICAgIHN0b3JlLnVwZGF0ZUl0ZW0oaXRlbUlkLCBwYXJzZUludChldmVudC50YXJnZXQudmFsdWUpKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICB9XG5cbiAgcmVtb3ZlKCkge1xuICAgIGNvbnN0IHJlbW92ZUJ0biA9IHRoaXMudGVtcGxhdGUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgncmVtb3ZlJyk7XG5cbiAgICBmb3IgKGxldCByZW1vdmUgb2YgcmVtb3ZlQnRuKSB7XG4gICAgICByZW1vdmUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3Qgc3RvcmUgPSBuZXcgQ2FydE1hbmFnZXIoKTtcblxuICAgICAgICAvLyBSZW1vdmUgaXRlbSBmcm9tIGNhcnRcbiAgICAgICAgc3RvcmUucmVtb3ZlSXRlbShyZW1vdmUuZGF0YXNldC5pZCk7XG5cbiAgICAgICAgLy8gUmVsb2FkIHRoZSBwYWdlIHRvIGRpc3BsYXkgdXBkYXRlZCBjYXJ0XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgICAgIH0pXG4gICAgfVxuXG4gIH1cblxuICBzZXRUb3RhbCgpIHtcbiAgICBjb25zdCB0b3RhbFBlckl0ZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCd0b3RhbC1wZXItaXRlbScpO1xuICAgIGNvbnN0IGNhcnRUb3RhbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjYXJ0LXRvdGFsJyk7XG4gICAgbGV0IHRvdGFsID0gMDtcblxuICAgIGZvciAobGV0IGl0ZW0gb2YgdG90YWxQZXJJdGVtKSB7XG4gICAgICB0b3RhbCArPSBwYXJzZUludChpdGVtLmRhdGFzZXQudG90YWwpXG4gICAgfVxuXG4gICAgY2FydFRvdGFsLnRleHRDb250ZW50ID0gZm9ybWF0UHJpY2UodG90YWwpXG4gIH1cblxuICB0b0hUTUwoKSB7XG4gICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBjb25zdCB0YWJsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RhYmxlJyk7XG4gICAgdGFibGUuY2xhc3NMaXN0LmFkZCgndy1mdWxsJyk7XG5cbiAgICB0YWJsZS5pbm5lckhUTUwgPSBgXG4gICAgICA8dGhlYWQ+XG4gICAgICAgIDx0ciBjbGFzcz1cImJvcmRlci1iIHRleHQtbGdcIj5cbiAgICAgICAgICA8dGggY2xhc3M9XCJ0ZXh0LWxlZnQgcGItMlwiPkTDqXNpZ25hdGlvbjwvdGg+XG4gICAgICAgICAgPHRoPlByaXg8L3RoPlxuICAgICAgICAgIDx0aD5RdWFudGl0w6k8L3RoPlxuICAgICAgICAgIDx0aD5Tb3VzLXRvdGFsPC90aD5cbiAgICAgICAgICA8dGg+PC90aD5cbiAgICAgICAgPC90cj5cbiAgICAgIDwvdGhlYWQ+XG4gICAgICA8dGJvZHk+XG4gICAgICAke3RoaXMuZGF0YS5pdGVtcy5tYXAoaXRlbSA9PiB7XG4gICAgICAvLyBDcmVhdGUgYSB0YWJsZSByb3cgZm9yIGVhY2ggaXRlbSBpbiBjYXJ0XG4gICAgICByZXR1cm4gYFxuICAgICAgICAgIDx0ciBjbGFzcz1cImJvcmRlci1iXCI+XG4gICAgICAgICAgICA8dGQgY2xhc3M9XCJweS0yXCI+XG4gICAgICAgICAgICAgIDxhIGhyZWY9XCJpdGVtLmh0bWw/aWQ9JHtpdGVtLmlkfVwiPlxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaW5saW5lLWJsb2NrIHctZnVsbCB1cHBlcmNhc2UgZm9udC1zZW1pYm9sZFwiPlBlbHVjaGUgXCIke2l0ZW0ubmFtZX1cIjwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImlubGluZS1ibG9jayB0ZXh0LXNtXCI+UmVmOiAke2l0ZW0uaWR9PC9zcGFuPlxuICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgPHRkIGlkPVwicHJpY2UtJHtpdGVtLmlkfVwiIGRhdGEtcHJpY2U9XCIke2l0ZW0ucHJpY2V9XCIgY2xhc3M9XCJ0ZXh0LWNlbnRlciBweS0yXCI+XG4gICAgICAgICAgICAgICR7Zm9ybWF0UHJpY2UoaXRlbS5wcmljZSl9XG4gICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgPHRkIGNsYXNzPVwidGV4dC1jZW50ZXIgcHktMlwiPlxuICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiIG1pbj1cIjFcIiBkYXRhLWlkPVwiJHtpdGVtLmlkfVwiIHZhbHVlPVwiJHtpdGVtLnF1YW50aXR5fVwiXG4gICAgICAgICAgICAgIGNsYXNzPVwicXVhbnRpdHkgaW5saW5lLWJsb2NrIHctMTYgcHktMiBweC0xIHJvdW5kZWQtbWQgYm9yZGVyIHRleHQtY2VudGVyXCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICA8dGQgaWQ9XCJ0b3RhbC0ke2l0ZW0uaWR9XCIgZGF0YS10b3RhbD1cIiR7aXRlbS5wcmljZSAqIGl0ZW0ucXVhbnRpdHl9XCIgY2xhc3M9XCJ0b3RhbC1wZXItaXRlbSB0ZXh0LWNlbnRlciBweS0yXCI+JHtmb3JtYXRQcmljZShpdGVtLnByaWNlICogaXRlbS5xdWFudGl0eSl9PC90ZD5cbiAgICAgICAgICAgIDx0ZCBjbGFzcz1cInB4LTRcIj5cbiAgICAgICAgICAgICAgPGJ1dHRvbiB0aXRsZT1cIlN1cHByaW1lciBsJ2FydGljbGUgZHUgcGFuaWVyXCIgZGF0YS1pZD1cIiR7aXRlbS5pZH1cIiBjbGFzcz1cInJlbW92ZSB0ZXh0LWxnIHRleHQtcmVkLTQwMFwiPiYjMTAwMDY7PC9idXR0b24+XG4gICAgICAgICAgICA8L3RkPlxuICAgICAgICAgIDwvdHI+XG4gICAgICAgIGB9KS5qb2luKCcnKVxuICAgICAgfVxuICAgICAgPC90Ym9keT5cbiAgICAgIDx0Zm9vdD5cbiAgICAgICAgPHRyIGNsYXNzPVwiZm9udC1ib2xkXCI+XG4gICAgICAgICAgPHRkPlxuICAgICAgICAgICAgPGJ1dHRvbiBpZD1cImNsZWFyLWNhcnRcIiBjbGFzcz1cImJvcmRlciBib3JkZXItcmVkLTQwMCB0ZXh0LXJlZC01MDAgcHktMiBweC00IHJvdW5kZWQtbWQgaG92ZXI6YmctcmVkLTQwMCBob3Zlcjp0ZXh0LXdoaXRlXCI+XG4gICAgICAgICAgICAgIFZpZGVyIG1vbiBwYW5pZXJcbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICA8L3RkPlxuICAgICAgICAgIDx0ZD48L3RkPlxuICAgICAgICAgIDx0ZCBjbGFzcz1cInB5LTQgdGV4dC1jZW50ZXIgdXBwZXJjYXNlXCI+VG90YWwgVC5ULkM6PC90ZD5cbiAgICAgICAgICA8dGQgY2xhc3M9XCJweS00IHRleHQtY2VudGVyXCI+XG4gICAgICAgICAgICA8ZGl2IGlkPVwiY2FydC10b3RhbFwiIGNsYXNzPVwidGV4dC0yeGxcIj5cbiAgICAgICAgICAgICAgJHtmb3JtYXRQcmljZSh0aGlzLmRhdGEudG90YWwpfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC90ZD5cbiAgICAgICAgPC90cj5cbiAgICAgIDwvdGZvb3Q+XG4gICAgYDtcblxuICAgIGNvbnN0IGN0YSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGN0YS5jbGFzc0xpc3QuYWRkKCdtdC0xNicsICd0ZXh0LXJpZ2h0Jyk7XG5cbiAgICBjdGEuaW5uZXJIVE1MID0gYFxuICAgICAgPGJ1dHRvbiBpZD1cImNvbmZpcm0tY2FydFwiIGNsYXNzPVwiaW5saW5lLWJsb2NrIHB4LTQgcHktMiBib3JkZXIgdGV4dC1ibHVlLTUwMCBib3JkZXItYmx1ZS01MDAgcm91bmRlZC1tZCBmb250LW1lZGl1bSBob3ZlcjpiZy1ibHVlLTUwMCBob3Zlcjp0ZXh0LXdoaXRlXCI+XG4gICAgICAgIFZhbGlkZXIgbGUgcGFuaWVyXG4gICAgICA8L2J1dHRvbj5cbiAgICBgXG5cbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQodGFibGUpXG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGN0YSlcblxuICAgIHRoaXMudGVtcGxhdGUgPSBjb250YWluZXI7XG5cbiAgICAvLyBBdHRhY2ggZXZlbnRzIGxpc3RlbmVyc1xuICAgIHRoaXMudXBkYXRlUHJpY2UoKTtcbiAgICB0aGlzLnJlbW92ZSgpO1xuICB9XG5cbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBDb250YWN0Rm9ybSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMudGVtcGxhdGUgPSBudWxsO1xuICAgIHRoaXMuZGF0YSA9IHt9O1xuICAgIHRoaXMuZXJyb3JzID0gW107XG4gIH1cblxuICBpbmplY3RUbyhtb3VudFBvaW50KSB7XG4gICAgLy8gQ3JlYXRlIG1hcmt1cCB0aGVuIGluamVjdCBpdCBpbnRvIHNlbGVjdGVkIGVsZW1lbnQgKG1vdW50UG9pbnQpIGluIHRoZSBET01cbiAgICB0aGlzLnRvSFRNTCgpO1xuICAgIG1vdW50UG9pbnQuYXBwZW5kQ2hpbGQodGhpcy50ZW1wbGF0ZSk7XG4gIH1cblxuICB2YWxpZGF0ZSgpIHtcbiAgICB0aGlzLmVycm9ycyA9IFtdO1xuXG4gICAgLy8gR2V0IGluZm9ybWF0aW9uIGZyb20gZm9ybSwgYXNzaWduIG51bGwgaWYgZW1wdHlcbiAgICBjb25zdCBsYXN0TmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNsYXN0bmFtZScpLnZhbHVlIHx8IG51bGxcbiAgICBjb25zdCBmaXJzdE5hbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZmlyc3RuYW1lJykudmFsdWUgfHwgbnVsbFxuICAgIGNvbnN0IGFkZHJlc3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjYWRkcmVzcycpLnZhbHVlIHx8IG51bGxcbiAgICBjb25zdCBhZGRyZXNzQ29tcGxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNhZGRyZXNzLWNvbXBsZW1lbnQnKS52YWx1ZSB8fCBudWxsXG4gICAgY29uc3QgemlwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3ppcCcpLnZhbHVlIHx8IG51bGxcbiAgICBjb25zdCBjaXR5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2NpdHknKS52YWx1ZSB8fCBudWxsXG4gICAgY29uc3QgZW1haWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZW1haWwnKS52YWx1ZSB8fCBudWxsXG4gICAgY29uc3QgZW1haWxDb25maXJtYXRpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZW1haWwtY29uZmlybScpLnZhbHVlIHx8IG51bGw7XG5cbiAgICAvLyBDaGVjayBlbWFpbFxuICAgIGlmIChlbWFpbCAhPT0gZW1haWxDb25maXJtYXRpb24pIHtcbiAgICAgIHRoaXMuZXJyb3JzLnB1c2goJ0xlcyBhZHJlc3NlcyBlbWFpbCBuZSBjb3JyZXNwb25kZW50IHBhcycpXG4gICAgfVxuXG5cbiAgICBpZiAobGFzdE5hbWUsIGZpcnN0TmFtZSwgYWRkcmVzcywgYWRkcmVzc0NvbXBsZW1lbnQsIHppcCwgY2l0eSwgZW1haWwsIGVtYWlsQ29uZmlybWF0aW9uKSB7XG4gICAgICB0aGlzLmRhdGEgPSB7XG4gICAgICAgIGxhc3ROYW1lLFxuICAgICAgICBmaXJzdE5hbWUsXG4gICAgICAgIGFkZHJlc3MsXG4gICAgICAgIGFkZHJlc3NDb21wbGVtZW50LFxuICAgICAgICB6aXAsXG4gICAgICAgIGNpdHksXG4gICAgICAgIGVtYWlsLFxuICAgICAgICBlbWFpbENvbmZpcm1hdGlvblxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIERpc3BsYXkgZXJyb3IgbWVzc2FnZSB0byB0aGUgdXNlciBpZiBmb3JtIHZhbGlkYXRpb24gZmFpbCB0aGVuIGNhbmNlbCB2YWxpZGF0aW9uXG4gICAgaWYgKHRoaXMuZXJyb3JzLmxlbmd0aCkge1xuICAgICAgdGhpcy5zaG93RXJyb3JzKCk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gQ29uZmlybSB2YWxpZGF0aW9uXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBvblN1Ym1pdChjYikge1xuICAgIGNvbnN0IGZvcm0gPSB0aGlzLnRlbXBsYXRlLnF1ZXJ5U2VsZWN0b3IoJyNjb250YWN0Jyk7XG5cbiAgICBmb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIChldmVudCkgPT4ge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGlmICh0aGlzLnZhbGlkYXRlKCkpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IHtcbiAgICAgICAgICBsYXN0TmFtZTogdGhpcy5kYXRhLmxhc3ROYW1lLFxuICAgICAgICAgIGZpcnN0TmFtZTogdGhpcy5kYXRhLmZpcnN0TmFtZSxcbiAgICAgICAgICBhZGRyZXNzOiB0aGlzLmRhdGEuYWRkcmVzcyxcbiAgICAgICAgICBjaXR5OiB0aGlzLmRhdGEuY2l0eSxcbiAgICAgICAgICBlbWFpbDogdGhpcy5kYXRhLmVtYWlsXG4gICAgICAgIH1cbiAgICAgICAgLy8gUHJvY2VzcyBldmVudCBmcm9tIHZpZXdcbiAgICAgICAgY2IoZGF0YSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICB0b0hUTUwoKSB7XG4gICAgY29uc3QgZm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGZvcm0uY2xhc3NMaXN0LmFkZCgnbXQtMTYnLCAnbWF4LXctc2NyZWVuLXNtJywgJ214LWF1dG8nKTtcblxuICAgIGZvcm0uaW5uZXJIVE1MID0gYFxuICAgICAgPGgyIGNsYXNzPVwidGV4dC1jZW50ZXIgdGV4dC0yeGxcIj5JbmZvcm1hdGlvbnMgZGUgbGl2cmFpc29uPC9oMj5cbiAgICAgIDxmb3JtIGlkPVwiY29udGFjdFwiIGNsYXNzPVwibXQtOFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwicHgtNCBweS0yIGJnLXllbGxvdy0yMDAgdGV4dC1zbSB0ZXh0LXllbGxvdy05MDAgcm91bmRlZC1tZFwiPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwibXItMlwiPiYjMTI4NzEyOzwvc3Bhbj5MZXMgY2hhbXBzIHByw6ljw6lkw6lzIGQndW5cbiAgICAgICAgICA8c3Ryb25nPio8L3N0cm9uZz4gc29udCBvYmxpZ2F0b2lyZXMuXG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGlkPVwiZXJyb3JzXCI+PC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4IGZsZXgtY29sIGdhcC00IG10LTggc206ZmxleC1yb3cgc206Z2FwLThcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmxleC0xXCI+XG4gICAgICAgICAgICA8bGFiZWwgZm9yPVwibGFzdG5hbWVcIiBjbGFzcz1cImlubGluZS1ibG9jayB3LWZ1bGwgdGV4dC1zbVwiPipOb206PC9sYWJlbD5cbiAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICAgIG5hbWU9XCJsYXN0bmFtZVwiXG4gICAgICAgICAgICAgIGlkPVwibGFzdG5hbWVcIlxuICAgICAgICAgICAgICB2YWx1ZT1cIiR7dGhpcy5kYXRhLmxhc3ROYW1lID8/ICcnfVwiXG4gICAgICAgICAgICAgIHJlcXVpcmVkXG4gICAgICAgICAgICAgIGNsYXNzPVwidy1mdWxsIG10LTEgcHgtNCBweS0yIGJvcmRlciByb3VuZGVkLW1kXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImZsZXgtMVwiPlxuICAgICAgICAgICAgPGxhYmVsIGZvcj1cImZpcnN0bmFtZVwiIGNsYXNzPVwiaW5saW5lLWJsb2NrIHctZnVsbCB0ZXh0LXNtXCJcbiAgICAgICAgICAgICAgPipQcsOpbm9tOjwvbGFiZWxcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICAgIG5hbWU9XCJmaXJzdG5hbWVcIlxuICAgICAgICAgICAgICBpZD1cImZpcnN0bmFtZVwiXG4gICAgICAgICAgICAgIHZhbHVlPVwiJHt0aGlzLmRhdGEuZmlyc3ROYW1lID8/ICcnfVwiXG4gICAgICAgICAgICAgIHJlcXVpcmVkXG4gICAgICAgICAgICAgIGNsYXNzPVwidy1mdWxsIG10LTEgcHgtNCBweS0yIGJvcmRlciByb3VuZGVkLW1kXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwibXQtNFwiPlxuICAgICAgICAgIDxsYWJlbCBmb3I9XCJhZGRyZXNzXCIgY2xhc3M9XCJpbmxpbmUtYmxvY2sgdy1mdWxsIHRleHQtc21cIj4qQWRyZXNzZTo8L2xhYmVsPlxuICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgbmFtZT1cImFkZHJlc3NcIlxuICAgICAgICAgICAgaWQ9XCJhZGRyZXNzXCJcbiAgICAgICAgICAgIHZhbHVlPVwiJHt0aGlzLmRhdGEuYWRkcmVzcyA/PyAnJ31cIlxuICAgICAgICAgICAgcmVxdWlyZWRcbiAgICAgICAgICAgIGNsYXNzPVwidy1mdWxsIG10LTEgcHgtNCBweS0yIGJvcmRlciByb3VuZGVkLW1kXCJcbiAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm10LTRcIj5cbiAgICAgICAgICA8bGFiZWwgZm9yPVwiYWRkcmVzcy1jb21wbGVtZW50XCIgY2xhc3M9XCJpbmxpbmUtYmxvY2sgdy1mdWxsIHRleHQtc21cIlxuICAgICAgICAgICAgPkNvbXBsw6htZW50IGQnYWRyZXNzZTo8L2xhYmVsXG4gICAgICAgICAgPlxuICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgbmFtZT1cImFkZHJlc3MtY29tcGxlbWVudFwiXG4gICAgICAgICAgICBpZD1cImFkZHJlc3MtY29tcGxlbWVudFwiXG4gICAgICAgICAgICB2YWx1ZT1cIiR7dGhpcy5kYXRhLmFkZHJlc3NDb21wbGVtZW50ID8/ICcnfVwiXG4gICAgICAgICAgICBjbGFzcz1cInctZnVsbCBtdC0xIHB4LTQgcHktMiBib3JkZXIgcm91bmRlZC1tZFwiXG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4IGZsZXgtY29sIGdhcC00IHNtOmZsZXgtcm93IHNtOmdhcC04IG10LTRcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmxleC0xXCI+XG4gICAgICAgICAgICA8bGFiZWwgZm9yPVwiemlwXCIgY2xhc3M9XCJpbmxpbmUtYmxvY2sgdy1mdWxsIHRleHQtc21cIlxuICAgICAgICAgICAgICA+Q29kZSBwb3N0YWw6PC9sYWJlbFxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgICAgbmFtZT1cInppcFwiXG4gICAgICAgICAgICAgIGlkPVwiemlwXCJcbiAgICAgICAgICAgICAgdmFsdWU9XCIke3RoaXMuZGF0YS56aXAgPz8gJyd9XCJcbiAgICAgICAgICAgICAgY2xhc3M9XCJ3LWZ1bGwgbXQtMSBweC00IHB5LTIgYm9yZGVyIHJvdW5kZWQtbWRcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmxleC0xXCI+XG4gICAgICAgICAgICA8bGFiZWwgZm9yPVwiY2l0eVwiIGNsYXNzPVwiaW5saW5lLWJsb2NrIHctZnVsbCB0ZXh0LXNtXCI+KlZpbGxlOjwvbGFiZWw+XG4gICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgICBuYW1lPVwiY2l0eVwiXG4gICAgICAgICAgICAgIGlkPVwiY2l0eVwiXG4gICAgICAgICAgICAgIHZhbHVlPVwiJHt0aGlzLmRhdGEuY2l0eSA/PyAnJ31cIlxuICAgICAgICAgICAgICByZXF1aXJlZFxuICAgICAgICAgICAgICBjbGFzcz1cInctZnVsbCBtdC0xIHB4LTQgcHktMiBib3JkZXIgcm91bmRlZC1tZFwiXG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm10LTRcIj5cbiAgICAgICAgICA8bGFiZWwgZm9yPVwiZW1haWxcIiBjbGFzcz1cImlubGluZS1ibG9jayB3LWZ1bGwgdGV4dC1zbVwiXG4gICAgICAgICAgICA+QWRyZXNzZSBtYWlsOjwvbGFiZWxcbiAgICAgICAgICA+XG4gICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICB0eXBlPVwiZW1haWxcIlxuICAgICAgICAgICAgbmFtZT1cImVtYWlsXCJcbiAgICAgICAgICAgIGlkPVwiZW1haWxcIlxuICAgICAgICAgICAgdmFsdWU9XCIke3RoaXMuZGF0YS5lbWFpbCA/PyAnJ31cIlxuICAgICAgICAgICAgcmVxdWlyZWRcbiAgICAgICAgICAgIGNsYXNzPVwidy1mdWxsIG10LTEgcHgtNCBweS0yIGJvcmRlciByb3VuZGVkLW1kXCJcbiAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm10LTRcIj5cbiAgICAgICAgICA8bGFiZWwgZm9yPVwiZW1haWwtY29uZmlybVwiIGNsYXNzPVwiaW5saW5lLWJsb2NrIHctZnVsbCB0ZXh0LXNtXCJcbiAgICAgICAgICAgID5Db25maXJtZXIgbCdhZHJlc3NlIG1haWw6PC9sYWJlbFxuICAgICAgICAgID5cbiAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgIHR5cGU9XCJlbWFpbFwiXG4gICAgICAgICAgICBuYW1lPVwiZW1haWwtY29uZmlybVwiXG4gICAgICAgICAgICBpZD1cImVtYWlsLWNvbmZpcm1cIlxuICAgICAgICAgICAgdmFsdWU9XCIke3RoaXMuZGF0YS5lbWFpbENvbmZpcm1hdGlvbiA/PyAnJ31cIlxuICAgICAgICAgICAgcmVxdWlyZWRcbiAgICAgICAgICAgIGNsYXNzPVwidy1mdWxsIG10LTEgcHgtNCBweS0yIGJvcmRlciByb3VuZGVkLW1kXCJcbiAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm10LTggdGV4dC1yaWdodFwiPlxuICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgIHR5cGU9XCJzdWJtaXRcIlxuICAgICAgICAgICAgY2xhc3M9XCJpbmxpbmUtYmxvY2sgYmctYmx1ZS0yMDAgcHgtNCBweS0yIHRleHQtYmx1ZS05MDAgcm91bmRlZC1tZCB0ZXh0LWxnIGZvbnQtc2VtaWJvbGQgaG92ZXI6YmctYmx1ZS0zMDBcIlxuICAgICAgICAgID5cbiAgICAgICAgICBDb21tYW5kZXJcbiAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Zvcm0+XG4gICAgYDtcblxuICAgIHRoaXMudGVtcGxhdGUgPSBmb3JtO1xuICB9XG5cbiAgc2hvd0Vycm9ycygpIHtcbiAgICBjb25zdCBlcnJvckxpc3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd1bCcpO1xuICAgIGVycm9yTGlzdC5jbGFzc0xpc3QuYWRkKCdtdC00JylcblxuICAgIGVycm9yTGlzdC5pbm5lckhUTUwgPSBgXG4gICAgICAke3RoaXMuZXJyb3JzLm1hcChlcnJvciA9PiB7XG4gICAgICByZXR1cm4gYDxsaSBjbGFzcz1cInB4LTQgcHktMiBiZy1yZWQtMjAwIHRleHQtc20gdGV4dC1yZWQtOTAwIHJvdW5kZWQtbWRcIj48c3BhbiBjbGFzcz1cIm1yLTJcIj4mIzk4ODg7PC9zcGFuPiR7ZXJyb3J9PC9saT5gO1xuICAgIH0pfVxuICAgIGA7XG5cbiAgICB0aGlzLnRlbXBsYXRlLnF1ZXJ5U2VsZWN0b3IoJyNlcnJvcnMnKS5hcHBlbmRDaGlsZChlcnJvckxpc3QpO1xuICB9XG5cbn0iLCJleHBvcnQgZGVmYXVsdCB7XG4gIGVtcHR5Q2FydDogYFxuICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LWNlbnRlclwiPlxuICAgIDxwPlZvdHJlIHBhbmllciBlc3QgdmlkZS48L3A+XG4gICAgPGRpdiBjbGFzcz1cIm10LTEyIHRleHQtY2VudGVyXCI+XG4gICAgICA8YSBocmVmPVwiaW5kZXguaHRtbFwiXG4gICAgICAgIGNsYXNzPVwiaW5saW5lLWJsb2NrIHB4LTQgcHktMiBib3JkZXIgdGV4dC1ibHVlLTUwMCBib3JkZXItYmx1ZS01MDAgcm91bmRlZC1tZCBmb250LW1lZGl1bSBob3ZlcjpiZy1ibHVlLTUwMCBob3Zlcjp0ZXh0LXdoaXRlXCI+XG4gICAgICAgIETDqWNvdXZyaXIgbm9zIGFydGljbGVzXG4gICAgICA8L2E+XG4gICAgPC9kaXY+XG4gIGAsXG5cbiAgbm90Rm91bmRJdGVtOiBgXG4gICAgPGRpdiBjbGFzcz1cInRleHQtY2VudGVyXCI+XG4gICAgICA8aDIgY2xhc3M9XCJ0ZXh0LXhsXCI+TCdhcnRpY2xlIGRlbWFuZMOpIG4nZXhpc3RlIHBhcy48L2gyPlxuICAgICAgPHAgY2xhc3M9XCJtdC02XCI+XG4gICAgICAgIDxhIGNsYXNzPVwidW5kZXJsaW5lIHRleHQtYmx1ZS02MDAgaG92ZXI6dGV4dC1ibHVlLTgwMFwiIGhyZWY9XCJpbmRleC5odG1sXCI+UmV0b3VybmVyIMOgIGxhIHBhZ2UgZCdhY2N1ZWlsLjwvYT5cbiAgICAgIDwvcD5cbiAgICA8L2Rpdj5cbiAgYCxcblxuICBvcmRlclN1Y2Nlc3MoaWQpIHtcbiAgICByZXR1cm4gYFxuICAgICAgPGRpdiBjbGFzcz1cIm1heC13LWxnIG14LWF1dG8gcC04IHRleHQtZ3JlZW4tODAwIGJnLWdyZWVuLTEwMCByb3VuZGVkLW1kIGJvcmRlciBib3JkZXItZ3JlZW4tMjAwXCI+XG4gICAgICAgIDxoMiBjbGFzcz1cInRleHQteGwgdGV4dC1jZW50ZXJcIj5Wb3RyZSBjb21tYW5kZSBhIMOpdMOpIHZhbGlkw6llPC9oMj5cbiAgICAgICAgPHAgY2xhc3M9XCJtdC02XCI+T3Jpbm9jbyB2b3VzIHJlbWVyY2llIHBvdXIgdm90cmUgYWNoYXQuPC9wPlxuICAgICAgICA8cCBjbGFzcz1cIm10LTRcIj5cbiAgICAgICAgICBMYSBjb21tYW5kZSByZWY6IDxzdHJvbmc+JHtpZH08L3N0cm9uZz4gZXN0IGVuIGNvdXJzIGRlXG4gICAgICAgICAgdHJhaXRlbWVudCBldCBzZXJhIGV4cMOpZGnDqSBkYW5zIGxlcyBtZWlsbGV1cnMgZMOpbGFpcy5cbiAgICAgICAgPC9wPlxuICAgICAgICA8cCBjbGFzcz1cIm10LTYgdGV4dC1yaWdodFwiPkEgYmllbnTDtHQgc3VyIE9yaW5vY28uPC9wPlxuICAgICAgPC9kaXY+XG4gICAgYDtcbiAgfVxufSIsImltcG9ydCBEYXRhTWFuYWdlciBmcm9tICcuL21vZHVsZXMvRGF0YU1hbmFnZXInO1xuaW1wb3J0IENhcnRNYW5hZ2VyIGZyb20gJy4vbW9kdWxlcy9DYXJ0TWFuYWdlcic7XG5pbXBvcnQgVGFibGUgZnJvbSAnLi9jb21wb25lbnRzL1RhYmxlJztcbmltcG9ydCBDb250YWN0Rm9ybSBmcm9tICcuL2NvbXBvbmVudHMvQ29udGFjdEZvcm0nO1xuaW1wb3J0IGRlZmF1bHRNYXJrdXAgZnJvbSAnLi90ZW1wbGF0ZXMvZGVmYXVsdE1hcmt1cCc7XG5cbmNvbnN0IGNhcnQgPSBuZXcgQ2FydE1hbmFnZXIoKTtcblxuY29uc3QgY2FydE1vdW50UG9pbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb3JkZXInKTtcblxuLy8gQ2hlY2sgaWYgY2FydCBjb250YWlucyBpdGVtc1xuaWYgKGNhcnQuZ2V0Q291bnQoKSA+IDApIHtcbiAgLy8gQ3JlYXRlIGEgdGFibGUgd2l0aCBjYXJ0IGNvbnRlbnRcbiAgY29uc3Qgc3VtbWFyeSA9IG5ldyBUYWJsZShjYXJ0LmdldERhdGEoKSk7XG5cbiAgc3VtbWFyeS5pbmplY3RUbyhjYXJ0TW91bnRQb2ludCk7XG5cbiAgLy8gUHJvY2VzcyBjYXJ0IGNvbmZpcm1hdGlvblxuICBzdW1tYXJ5Lm9uQ2FydENvbmZpcm1hdGlvbigoZXZlbnQpID0+IHtcbiAgICAvLyBDcmVhdGUgYSBjb250YWN0IGZvcm1cbiAgICBjb25zdCBmb3JtID0gbmV3IENvbnRhY3RGb3JtKCk7XG4gICAgZm9ybS5pbmplY3RUbyhjYXJ0TW91bnRQb2ludCk7XG4gICAgZXZlbnQudGFyZ2V0LnJlbW92ZSgpO1xuXG4gICAgLy8gUHJvY2VzcyBmb3JtIHN1Ym1pc3Npb25cbiAgICBmb3JtLm9uU3VibWl0KChkYXRhKSA9PiB7XG4gICAgICAvLyBQcmVwYXJlIGRhdGEgdG8gYmUgc2VuZCB0byB0aGUgYXBpXG4gICAgICBjb25zdCBvcmRlciA9IHtcbiAgICAgICAgY29udGFjdDogZGF0YSxcbiAgICAgICAgcHJvZHVjdHM6IGNhcnQuZ2V0SXRlbXMoKVxuICAgICAgfTtcblxuICAgICAgLy8gQ3JlYXRlIGEgY29ubmVjdGlvbiB0byB0aGUgYXBpXG4gICAgICBjb25zdCBhcGkgPSBuZXcgRGF0YU1hbmFnZXIoJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMC9hcGkvdGVkZGllcy9vcmRlci8nKTtcblxuICAgICAgLy8gU2VuZCBkYXRhIHRoZW4gZGlzcGxheSBhIG1lc3NhZ2UgdG8gY29uZmlybSBvcmRlciB2YWxpZGF0aW9uXG4gICAgICBhcGkuc2VuZChvcmRlcilcbiAgICAgICAgLnRoZW4oZGF0YSA9PiB7XG4gICAgICAgICAgY2FydE1vdW50UG9pbnQuaW5uZXJIVE1MID0gZGVmYXVsdE1hcmt1cC5vcmRlclN1Y2Nlc3MoZGF0YS5vcmRlcklkKVxuICAgICAgICAgIGNhcnQuY2xlYXIoKTtcbiAgICAgICAgfSk7XG4gICAgfSlcblxuICB9KVxuXG5cbiAgc3VtbWFyeS5vbkNhcnRDbGVhcigoKSA9PiB7XG4gICAgY2FydC5jbGVhcigpO1xuICAgIGNhcnRNb3VudFBvaW50LmlubmVySFRNTCA9IGRlZmF1bHRNYXJrdXAuZW1wdHlDYXJ0O1xuICB9KVxuXG59IGVsc2Uge1xuICBjYXJ0TW91bnRQb2ludC5pbm5lckhUTUwgPSBkZWZhdWx0TWFya3VwLmVtcHR5Q2FydDtcbn0iXSwic291cmNlUm9vdCI6IiJ9